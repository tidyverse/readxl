[{"path":[]},{"path":"https://readxl.tidyverse.org/dev/CODE_OF_CONDUCT.html","id":"our-pledge","dir":"","previous_headings":"","what":"Our Pledge","title":"Contributor Covenant Code of Conduct","text":"members, contributors, leaders pledge make participation community harassment-free experience everyone, regardless age, body size, visible invisible disability, ethnicity, sex characteristics, gender identity expression, level experience, education, socio-economic status, nationality, personal appearance, race, caste, color, religion, sexual identity orientation. pledge act interact ways contribute open, welcoming, diverse, inclusive, healthy community.","code":""},{"path":"https://readxl.tidyverse.org/dev/CODE_OF_CONDUCT.html","id":"our-standards","dir":"","previous_headings":"","what":"Our Standards","title":"Contributor Covenant Code of Conduct","text":"Examples behavior contributes positive environment community include: Demonstrating empathy kindness toward people respectful differing opinions, viewpoints, experiences Giving gracefully accepting constructive feedback Accepting responsibility apologizing affected mistakes, learning experience Focusing best just us individuals, overall community Examples unacceptable behavior include: use sexualized language imagery, sexual attention advances kind Trolling, insulting derogatory comments, personal political attacks Public private harassment Publishing others’ private information, physical email address, without explicit permission conduct reasonably considered inappropriate professional setting","code":""},{"path":"https://readxl.tidyverse.org/dev/CODE_OF_CONDUCT.html","id":"enforcement-responsibilities","dir":"","previous_headings":"","what":"Enforcement Responsibilities","title":"Contributor Covenant Code of Conduct","text":"Community leaders responsible clarifying enforcing standards acceptable behavior take appropriate fair corrective action response behavior deem inappropriate, threatening, offensive, harmful. Community leaders right responsibility remove, edit, reject comments, commits, code, wiki edits, issues, contributions aligned Code Conduct, communicate reasons moderation decisions appropriate.","code":""},{"path":"https://readxl.tidyverse.org/dev/CODE_OF_CONDUCT.html","id":"scope","dir":"","previous_headings":"","what":"Scope","title":"Contributor Covenant Code of Conduct","text":"Code Conduct applies within community spaces, also applies individual officially representing community public spaces. Examples representing community include using official e-mail address, posting via official social media account, acting appointed representative online offline event.","code":""},{"path":"https://readxl.tidyverse.org/dev/CODE_OF_CONDUCT.html","id":"enforcement","dir":"","previous_headings":"","what":"Enforcement","title":"Contributor Covenant Code of Conduct","text":"Instances abusive, harassing, otherwise unacceptable behavior may reported community leaders responsible enforcement codeofconduct@posit.co. complaints reviewed investigated promptly fairly. community leaders obligated respect privacy security reporter incident.","code":""},{"path":"https://readxl.tidyverse.org/dev/CODE_OF_CONDUCT.html","id":"enforcement-guidelines","dir":"","previous_headings":"","what":"Enforcement Guidelines","title":"Contributor Covenant Code of Conduct","text":"Community leaders follow Community Impact Guidelines determining consequences action deem violation Code Conduct:","code":""},{"path":"https://readxl.tidyverse.org/dev/CODE_OF_CONDUCT.html","id":"id_1-correction","dir":"","previous_headings":"Enforcement Guidelines","what":"1. Correction","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Use inappropriate language behavior deemed unprofessional unwelcome community. Consequence: private, written warning community leaders, providing clarity around nature violation explanation behavior inappropriate. public apology may requested.","code":""},{"path":"https://readxl.tidyverse.org/dev/CODE_OF_CONDUCT.html","id":"id_2-warning","dir":"","previous_headings":"Enforcement Guidelines","what":"2. Warning","title":"Contributor Covenant Code of Conduct","text":"Community Impact: violation single incident series actions. Consequence: warning consequences continued behavior. interaction people involved, including unsolicited interaction enforcing Code Conduct, specified period time. includes avoiding interactions community spaces well external channels like social media. Violating terms may lead temporary permanent ban.","code":""},{"path":"https://readxl.tidyverse.org/dev/CODE_OF_CONDUCT.html","id":"id_3-temporary-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"3. Temporary Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: serious violation community standards, including sustained inappropriate behavior. Consequence: temporary ban sort interaction public communication community specified period time. public private interaction people involved, including unsolicited interaction enforcing Code Conduct, allowed period. Violating terms may lead permanent ban.","code":""},{"path":"https://readxl.tidyverse.org/dev/CODE_OF_CONDUCT.html","id":"id_4-permanent-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"4. Permanent Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Demonstrating pattern violation community standards, including sustained inappropriate behavior, harassment individual, aggression toward disparagement classes individuals. Consequence: permanent ban sort public interaction within community.","code":""},{"path":"https://readxl.tidyverse.org/dev/CODE_OF_CONDUCT.html","id":"attribution","dir":"","previous_headings":"","what":"Attribution","title":"Contributor Covenant Code of Conduct","text":"Code Conduct adapted Contributor Covenant, version 2.1, available https://www.contributor-covenant.org/version/2/1/code_of_conduct.html. Community Impact Guidelines inspired [Mozilla’s code conduct enforcement ladder][https://github.com/mozilla/inclusion]. answers common questions code conduct, see FAQ https://www.contributor-covenant.org/faq. Translations available https://www.contributor-covenant.org/translations.","code":""},{"path":"https://readxl.tidyverse.org/dev/CONTRIBUTING.html","id":null,"dir":"","previous_headings":"","what":"Contributing to readxl","title":"Contributing to readxl","text":"outlines propose change readxl. detailed info contributing , tidyverse packages, please see development contributing guide.","code":""},{"path":"https://readxl.tidyverse.org/dev/CONTRIBUTING.html","id":"fixing-typos","dir":"","previous_headings":"","what":"Fixing typos","title":"Contributing to readxl","text":"Small typos grammatical errors documentation may edited directly using GitHub web interface, long changes made source file. YES: edit roxygen comment .R file R/. : edit .Rd file man/.","code":""},{"path":"https://readxl.tidyverse.org/dev/CONTRIBUTING.html","id":"prerequisites","dir":"","previous_headings":"","what":"Prerequisites","title":"Contributing to readxl","text":"make substantial pull request, always file issue make sure someone team agrees ’s problem. ’ve found bug, create associated issue illustrate bug minimal reprex.","code":""},{"path":"https://readxl.tidyverse.org/dev/CONTRIBUTING.html","id":"pull-request-process","dir":"","previous_headings":"","what":"Pull request process","title":"Contributing to readxl","text":"recommend create Git branch pull request (PR). Look Travis AppVeyor build status making changes. README contain badges continuous integration services used package. New code follow tidyverse style guide. can use styler package apply styles, please don’t restyle code nothing PR. use roxygen2, Markdown syntax, documentation. use testthat. Contributions test cases included easier accept. user-facing changes, add bullet top NEWS.md current development version header describing changes made followed GitHub username, links relevant issue(s)/PR(s).","code":""},{"path":"https://readxl.tidyverse.org/dev/CONTRIBUTING.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of Conduct","title":"Contributing to readxl","text":"Please note readxl project released Contributor Code Conduct. contributing project agree abide terms.","code":""},{"path":"https://readxl.tidyverse.org/dev/CONTRIBUTING.html","id":"see-tidyverse-development-contributing-guide","dir":"","previous_headings":"","what":"See tidyverse development contributing guide","title":"Contributing to readxl","text":"details.","code":""},{"path":"https://readxl.tidyverse.org/dev/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2023 readxl authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://readxl.tidyverse.org/dev/SUPPORT.html","id":null,"dir":"","previous_headings":"","what":"Getting help with readxl","title":"Getting help with readxl","text":"Thanks using readxl. filing issue, places explore pieces put together make process smooth possible. Start making minimal reproducible example using reprex package. haven’t heard used reprex , ’re treat! Seriously, reprex make R-question-asking endeavors easier (pretty insane ROI five ten minutes ’ll take learn ’s ). additional reprex pointers, check Get help! section tidyverse site. Armed reprex, next step figure ask. ’s question: start community.rstudio.com, /StackOverflow. people answer questions. ’s bug: ’re right place, file issue. ’re sure: let community help figure ! problem bug feature request, can easily return report . opening new issue, sure search issues pull requests make sure bug hasn’t reported /already fixed development version. default, search pre-populated :issue :open. can edit qualifiers (e.g. :pr, :closed) needed. example, ’d simply remove :open search issues repo, open closed. right place, need file issue, please review “File issues” paragraph tidyverse contributing guidelines. Thanks help!","code":""},{"path":"https://readxl.tidyverse.org/dev/articles/cell-and-column-types.html","id":"type-guessing","dir":"Articles","previous_headings":"","what":"Type guessing","title":"Cell and Column Types","text":"use packages tidyverse, probably familiar readr, reads data flat files. Like readxl, readr also provides column type guessing, readr readxl different hood. readr guesses column type based data. readxl guesses column type based Excel cell types. cell Excel spreadsheet type. intents purposes, :        empty < boolean < numeric < text wrinkle datetimes special flavor numeric. cell particular type can always represented one higher type , possibly, one lower type. guessing, read_excel() keeps running “maximum” cell types seen given column. visited guess_max rows run data, guessed type column. strong current towards “text”, column type last resort. ’s example column guessing deaths.xlsx ships readxl.","code":"read_excel(readxl_example(\"deaths.xlsx\"), range = cell_rows(5:15)) #> # A tibble: 10 × 6 #>   Name          Profession   Age `Has kids` `Date of birth`     #>   <chr>         <chr>      <dbl> <lgl>      <dttm>              #> 1 David Bowie   musician      69 TRUE       1947-01-08 00:00:00 #> 2 Carrie Fisher actor         60 TRUE       1956-10-21 00:00:00 #> 3 Chuck Berry   musician      90 TRUE       1926-10-18 00:00:00 #> 4 Bill Paxton   actor         61 TRUE       1955-05-17 00:00:00 #> # ℹ 6 more rows #> # ℹ 1 more variable: `Date of death` <dttm>"},{"path":"https://readxl.tidyverse.org/dev/articles/cell-and-column-types.html","id":"excel-types-r-types-col_types","dir":"Articles","previous_headings":"","what":"Excel types, R types, col_types","title":"Cell and Column Types","text":"’s Excel cell/column types translated R types force type explicitly col_types: explanation weird cases first two rows: column falls data rectangle, want associated variable output, specify column type \"skip\". Internally, cells may visited order learn location, loaded data never read. request column included filled NAs. column can arise naturally, cells empty, can skip column (see previous point). Example skipping guessing: \"list\" column type last row: create list-column output, component length one atomic vector. type vectors determined using logic described . can useful data truly disparate type arranged column. demonstrate \"list\" column type using clippy.xlsx sheet ship Excel. second column holds information Clippy really hard store just one type. Final note: datetimes imported UTC timezone, , mercifully, Excel notion timezones.","code":"read_excel(   readxl_example(\"deaths.xlsx\"),   range = cell_rows(5:15),   col_types = c(\"guess\", \"skip\", \"guess\", \"skip\", \"skip\", \"skip\") ) #> # A tibble: 10 × 2 #>   Name            Age #>   <chr>         <dbl> #> 1 David Bowie      69 #> 2 Carrie Fisher    60 #> 3 Chuck Berry      90 #> 4 Bill Paxton      61 #> # ℹ 6 more rows (clippy <-     read_excel(readxl_example(\"clippy.xlsx\"), col_types = c(\"text\", \"list\"))) #> # A tibble: 4 × 2 #>   name                 value      #>   <chr>                <list>     #> 1 Name                 <chr [1]>  #> 2 Species              <chr [1]>  #> 3 Approx date of death <dttm [1]> #> 4 Weight in grams      <dbl [1]> tibble::deframe(clippy) #> $Name #> [1] \"Clippy\" #>  #> $Species #> [1] \"paperclip\" #>  #> $`Approx date of death` #> [1] \"2007-01-01 UTC\" #>  #> $`Weight in grams` #> [1] 0.9 sapply(clippy$value, class) #> [[1]] #> [1] \"character\" #>  #> [[2]] #> [1] \"character\" #>  #> [[3]] #> [1] \"POSIXct\" \"POSIXt\"  #>  #> [[4]] #> [1] \"numeric\""},{"path":"https://readxl.tidyverse.org/dev/articles/cell-and-column-types.html","id":"when-column-guessing-goes-wrong","dir":"Articles","previous_headings":"","what":"When column guessing goes wrong","title":"Cell and Column Types","text":"’s pretty common expect column import , say, numeric datetime. sad imports character instead. Two main causes: Contamination embedded missing bad data incompatible type. Example: missing data entered ?? numeric column. Fix: use na argument read_excel() describe possible forms missing data. prevent cells influencing type guessing cause import NA appropriate type. Contamination data rectangle leading trailing non-data rows. Example: sheet contains lines explanatory prose data table begins. Fix: specify target rectangle. Use skip n_max provide minimum number rows skip maximum number data rows read, respectively. use powerful range argument describe cell rectangle various ways. See examples read_excel() help vignette(\"sheet-geometry\") detail. deaths.xlsx sheet demonstrates perfectly. ’s imports don’t specify range : Non-data rows main data rectangle causing columns import character. column typing problem can’t solved specifying na data rectangle, request \"list\" column type handle missing data coercion import.","code":"deaths <- read_excel(readxl_example(\"deaths.xlsx\")) #> New names: #> • `` -> `...2` #> • `` -> `...3` #> • `` -> `...4` #> • `` -> `...5` #> • `` -> `...6` print(deaths, n = Inf) #> # A tibble: 18 × 6 #>    `Lots of people`             ...2            ...3  ...4  ...5  ...6  #>    <chr>                        <chr>           <chr> <chr> <chr> <chr> #>  1 simply cannot resist writing NA              NA    NA    NA    some… #>  2 at                           the             top   NA    of    thei… #>  3 or                           merging         NA    NA    NA    cells #>  4 Name                         Profession      Age   Has … Date… Date… #>  5 David Bowie                  musician        69    TRUE  17175 42379 #>  6 Carrie Fisher                actor           60    TRUE  20749 42731 #>  7 Chuck Berry                  musician        90    TRUE  9788  42812 #>  8 Bill Paxton                  actor           61    TRUE  20226 42791 #>  9 Prince                       musician        57    TRUE  21343 42481 #> 10 Alan Rickman                 actor           69    FALSE 16854 42383 #> 11 Florence Henderson           actor           82    TRUE  12464 42698 #> 12 Harper Lee                   author          89    FALSE 9615  42419 #> 13 Zsa Zsa Gábor                actor           99    TRUE  6247  42722 #> 14 George Michael               musician        53    FALSE 23187 42729 #> 15 Some                         NA              NA    NA    NA    NA    #> 16 NA                           also like to w… NA    NA    NA    NA    #> 17 NA                           NA              at t… bott… NA    NA    #> 18 NA                           NA              NA    NA    NA    too!"},{"path":"https://readxl.tidyverse.org/dev/articles/cell-and-column-types.html","id":"peek-at-column-names","dir":"Articles","previous_headings":"When column guessing goes wrong","what":"Peek at column names","title":"Cell and Column Types","text":"Sometimes aren’t completely sure column count order, yet need provide information via col_types. example, might know column named “foofy” text, ’re sure appears. maybe want ensure lots empty cells top “foofy” don’t cause guessed logical. ’s efficient trick get column names, can programmatically build col_types vector need main reading Excel file. Let’s imagine want force columns whose names include “Petal” text, leave everything else guessed.","code":"(nms <- names(read_excel(readxl_example(\"datasets.xlsx\"), n_max = 0))) #>  [1] \"mpg\"  \"cyl\"  \"disp\" \"hp\"   \"drat\" \"wt\"   \"qsec\" \"vs\"   \"am\"   #> [10] \"gear\" \"carb\" (ct <- ifelse(grepl(\"^Petal\", nms), \"text\", \"guess\")) #>  [1] \"guess\" \"guess\" \"guess\" \"guess\" \"guess\" \"guess\" \"guess\" \"guess\" #>  [9] \"guess\" \"guess\" \"guess\" read_excel(readxl_example(\"datasets.xlsx\"), col_types = ct) #> # A tibble: 32 × 11 #>     mpg   cyl  disp    hp  drat    wt  qsec    vs    am  gear  carb #>   <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> #> 1  21       6   160   110  3.9   2.62  16.5     0     1     4     4 #> 2  21       6   160   110  3.9   2.88  17.0     0     1     4     4 #> 3  22.8     4   108    93  3.85  2.32  18.6     1     1     4     1 #> 4  21.4     6   258   110  3.08  3.22  19.4     1     0     3     1 #> # ℹ 28 more rows"},{"path":"https://readxl.tidyverse.org/dev/articles/cell-and-column-types.html","id":"square-pegs-in-round-holes","dir":"Articles","previous_headings":"","what":"Square pegs in round holes","title":"Cell and Column Types","text":"can force column specific type via col_types. happens cells another type? either coerced requested type NA appropriate type. column type, present screen shot sheet built-example type-.xlsx. force first column specific type second column explains first. ’ll see mismatches cell type column type resolved.","code":""},{"path":"https://readxl.tidyverse.org/dev/articles/cell-and-column-types.html","id":"logical-column","dir":"Articles","previous_headings":"Square pegs in round holes","what":"Logical column","title":"Cell and Column Types","text":"numeric cell coerced FALSE zero TRUE otherwise. date cell becomes NA. Just like R, strings “T”, “TRUE”, “True”, “true” regarded TRUE “F”, “FALSE”, “False”, “false” FALSE. strings import NA. <img src=“img/type--logical.png” alt=“Screenshot worksheet named”logical_coercion” inside “type-.xlsx” example spreadsheet. cells first column (column ) mixed contents, empty, datetime, string. cells second column (column B) describe contents first column precise language.” width=“70%” />","code":"df <- read_excel(readxl_example(\"type-me.xlsx\"), sheet = \"logical_coercion\",                  col_types = c(\"logical\", \"text\")) #> Warning: Expecting logical in A5 / R5C1: got a date #> Warning: Expecting logical in A8 / R8C1: got 'cabbage' print(df, n = Inf) #> # A tibble: 10 × 2 #>    `maybe boolean?` description                          #>    <lgl>            <chr>                                #>  1 NA               \"empty\"                              #>  2 FALSE            \"0 (numeric)\"                        #>  3 TRUE             \"1 (numeric)\"                        #>  4 NA               \"datetime\"                           #>  5 TRUE             \"boolean true\"                       #>  6 FALSE            \"boolean false\"                      #>  7 NA               \"\\\"cabbage\\\"\"                        #>  8 TRUE             \"the string \\\"true\\\"\"                #>  9 FALSE            \"the letter \\\"F\\\"\"                   #> 10 FALSE            \"\\\"False\\\" preceded by single quote\""},{"path":"https://readxl.tidyverse.org/dev/articles/cell-and-column-types.html","id":"numeric-column","dir":"Articles","previous_headings":"Square pegs in round holes","what":"Numeric column","title":"Cell and Column Types","text":"boolean cell coerced zero FALSE one TRUE. datetime comes underlying serial date, number days, possibly fractional, since date origin. text, numeric conversion attempted, handle “number text” phenomenon. unsuccessful, text cells import NA. <img src=“img/type--numeric.png” alt=“Screenshot worksheet named”numeric_coercion” inside “type-.xlsx” example spreadsheet. cells first column (column ) mixed contents, empty, datetime, string. cells second column (column B) describe contents first column precise language.” width=“70%” />","code":"df <- read_excel(readxl_example(\"type-me.xlsx\"), sheet = \"numeric_coercion\",                  col_types = c(\"numeric\", \"text\")) #> Warning: Coercing boolean to numeric in A3 / R3C1 #> Warning: Coercing boolean to numeric in A4 / R4C1 #> Warning: Expecting numeric in A5 / R5C1: got a date #> Warning: Coercing text to numeric in A6 / R6C1: '123456' #> Warning: Expecting numeric in A8 / R8C1: got 'cabbage' print(df, n = Inf) #> # A tibble: 7 × 2 #>   `maybe numeric?` explanation             #>              <dbl> <chr>                   #> 1               NA \"empty\"                 #> 2                1 \"boolean true\"          #> 3                0 \"boolean false\"         #> 4            40534 \"datetime\"              #> 5           123456 \"the string \\\"123456\\\"\" #> 6           123456 \"the number 123456\"     #> 7               NA \"\\\"cabbage\\\"\""},{"path":"https://readxl.tidyverse.org/dev/articles/cell-and-column-types.html","id":"date-column","dir":"Articles","previous_headings":"Square pegs in round holes","what":"Date column","title":"Cell and Column Types","text":"numeric cell interpreted serial date (’m questioning whether wise, https://github.com/tidyverse/readxl/issues/266). Boolean text cells become NA. <img src=“img/type--date.png” alt=“Screenshot worksheet named”date_coercion” inside “type-.xlsx” example spreadsheet. cells first column (column ) mixed contents, empty, datetime, string. cells second column (column B) describe contents first column precise language.” width=“70%” />","code":"df <- read_excel(readxl_example(\"type-me.xlsx\"), sheet = \"date_coercion\",                  col_types = c(\"date\", \"text\")) #> Warning: Expecting date in A5 / R5C1: got boolean #> Warning: Expecting date in A6 / R6C1: got 'cabbage' #> Warning: Coercing numeric to date in A7 / R7C1 #> Warning: Coercing numeric to date in A8 / R8C1 print(df, n = Inf) #> # A tibble: 7 × 2 #>   `maybe a datetime?` explanation            #>   <dttm>              <chr>                  #> 1 NA                  \"empty\"                #> 2 2016-05-23 00:00:00 \"date only format\"     #> 3 2016-04-28 11:30:00 \"date and time format\" #> 4 NA                  \"boolean true\"         #> 5 NA                  \"\\\"cabbage\\\"\"          #> 6 1904-01-05 07:12:00 \"4.3 (numeric)\"        #> 7 2012-01-02 00:00:00 \"another numeric\""},{"path":"https://readxl.tidyverse.org/dev/articles/cell-and-column-types.html","id":"text-or-character-column","dir":"Articles","previous_headings":"Square pegs in round holes","what":"Text or character column","title":"Cell and Column Types","text":"boolean cell becomes either \"TRUE\" \"FALSE\". numeric cell converted character, much like .character() R. date cell handled like numeric, using underlying serial value. <img src=“img/type--text.png” alt=“Screenshot worksheet named”text_coercion” inside “type-.xlsx” example spreadsheet. cells first column (column ) mixed contents, empty, datetime, string. cells second column (column B) describe contents first column precise language.” width=“70%” />","code":"df <- read_excel(readxl_example(\"type-me.xlsx\"), sheet = \"text_coercion\",                  col_types = c(\"text\", \"text\")) print(df, n = Inf) #> # A tibble: 6 × 2 #>   text     explanation       #>   <chr>    <chr>             #> 1 NA       \"empty\"           #> 2 cabbage  \"\\\"cabbage\\\"\"     #> 3 TRUE     \"boolean true\"    #> 4 1.3      \"numeric\"         #> 5 41175    \"datetime\"        #> 6 36436153 \"another numeric\""},{"path":"https://readxl.tidyverse.org/dev/articles/column-names.html","id":"column-names-via-col_names","dir":"Articles","previous_headings":"","what":"Column names via col_names","title":"Column Names","text":"readxl always let specify col_names explicitly time import: users long wanted way specify name repair strategy, opposed enumerating actual column names.","code":"read_excel(   readxl_example(\"datasets.xlsx\"), sheet = \"chickwts\",   col_names = c(\"chick_weight\", \"chick_ate_this\"), skip = 1 ) #> # A tibble: 71 × 2 #>    chick_weight chick_ate_this #>           <dbl> <chr>          #>  1          179 horsebean      #>  2          160 horsebean      #>  3          136 horsebean      #>  4          227 horsebean      #>  5          217 horsebean      #>  6          168 horsebean      #>  7          108 horsebean      #>  8          124 horsebean      #>  9          143 horsebean      #> 10          140 horsebean      #> # ℹ 61 more rows"},{"path":"https://readxl.tidyverse.org/dev/articles/column-names.html","id":"built-in-levels-of--name_repair","dir":"Articles","previous_headings":"","what":"Built-in levels of .name_repair","title":"Column Names","text":"v1.2.0, readxl provides .name_repair argument, affords control column names checked repaired. .name_repair argument read_excel(), read_xls(), read_xlsx() works exactly way tibble::tibble() tibble::as_tibble(). reasoning behind name repair strategy laid design.tidyverse.org. readxl’s default .name_repair = \"unique\", ensures column unique name. already true column names, readxl won’t touch . value .name_repair = \"universal\" goes makes column names syntactic, .e. makes sure don’t contain forbidden characters reserved words. makes life easier use packages like ggplot2 dplyr downstream, column names “just work” everywhere won’t require protection via backtick quotes. Compare column names two calls. shows difference \"unique\" (names can contain spaces) \"universal\" (spaces replaced .). don’t want readxl touch column names , use .name_repair = \"minimal\".","code":"read_excel(   readxl_example(\"deaths.xlsx\"),  range = \"arts!A5:F8\" ) #> # A tibble: 3 × 6 #>   Name          Profession   Age `Has kids` `Date of birth`     #>   <chr>         <chr>      <dbl> <lgl>      <dttm>              #> 1 David Bowie   musician      69 TRUE       1947-01-08 00:00:00 #> 2 Carrie Fisher actor         60 TRUE       1956-10-21 00:00:00 #> 3 Chuck Berry   musician      90 TRUE       1926-10-18 00:00:00 #> # ℹ 1 more variable: `Date of death` <dttm>  read_excel(   readxl_example(\"deaths.xlsx\"), range = \"arts!A5:F8\",   .name_repair = \"universal\" ) #> New names: #> • `Has kids` -> `Has.kids` #> • `Date of birth` -> `Date.of.birth` #> • `Date of death` -> `Date.of.death` #> # A tibble: 3 × 6 #>   Name          Profession   Age Has.kids Date.of.birth       #>   <chr>         <chr>      <dbl> <lgl>    <dttm>              #> 1 David Bowie   musician      69 TRUE     1947-01-08 00:00:00 #> 2 Carrie Fisher actor         60 TRUE     1956-10-21 00:00:00 #> 3 Chuck Berry   musician      90 TRUE     1926-10-18 00:00:00 #> # ℹ 1 more variable: Date.of.death <dttm>"},{"path":"https://readxl.tidyverse.org/dev/articles/column-names.html","id":"pass-a-function-to--name_repair","dir":"Articles","previous_headings":"","what":"Pass a function to .name_repair","title":"Column Names","text":".name_repair argument also accepts function – pre-existing written – anonymous formula. function must operate “names , names ” basis. means can also perform name repair style base R another package, janitor::make_clean_names(). spreadsheet lots missing column names? ’s fall back letter-based column names, easier troubleshooting.","code":"## ALL CAPS! via built-in toupper() read_excel(readxl_example(\"clippy.xlsx\"), .name_repair = toupper) #> # A tibble: 4 × 2 #>   NAME                 VALUE     #>   <chr>                <chr>     #> 1 Name                 Clippy    #> 2 Species              paperclip #> 3 Approx date of death 39083     #> 4 Weight in grams      0.9  ## lower_snake_case via a custom function my_custom_name_repair <- function(nms) tolower(gsub(\"[.]\", \"_\", nms)) read_excel(   readxl_example(\"datasets.xlsx\"), n_max = 3,   .name_repair = my_custom_name_repair ) #> # A tibble: 3 × 11 #>     mpg   cyl  disp    hp  drat    wt  qsec    vs    am  gear  carb #>   <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> #> 1  21       6   160   110  3.9   2.62  16.5     0     1     4     4 #> 2  21       6   160   110  3.9   2.88  17.0     0     1     4     4 #> 3  22.8     4   108    93  3.85  2.32  18.6     1     1     4     1  ## take first 3 characters via anonymous function read_excel(   readxl_example(\"datasets.xlsx\"),   sheet = \"chickwts\", n_max = 3,   .name_repair = ~ substr(.x, start = 1, stop = 3) ) #> # A tibble: 3 × 2 #>     wei fee       #>   <dbl> <chr>     #> 1   179 horsebean #> 2   160 horsebean #> 3   136 horsebean read_excel(   SOME_SPREADSHEET,   .name_repair = ~ make.names(.x, unique = TRUE) )  read_excel(   SOME_SPREADSHEET,   .name_repair = janitor::make_clean_names ) read_excel(   SOME_SPREADSHEET,   .name_repair = ~ ifelse(nzchar(.x), .x, LETTERS[seq_along(.x)]) )"},{"path":"https://readxl.tidyverse.org/dev/articles/multiple-header-rows.html","id":"step-1","dir":"Articles","previous_headings":"","what":"Step 1","title":"Multiple Header Rows","text":"step, read first row (setting n_max = 0), extract names row (using names() function), assign character vector called cnames. object now contains correct column names ’ll need Step 2.","code":"(cnames <- readxl_example(\"clippy.xlsx\") %>%      read_excel(sheet = 2, n_max = 0) %>%      names()) #> [1] \"name\"    \"species\" \"death\"   \"weight\""},{"path":"https://readxl.tidyverse.org/dev/articles/multiple-header-rows.html","id":"step-2","dir":"Articles","previous_headings":"","what":"Step 2","title":"Multiple Header Rows","text":"Now ’ll read rows except first two rows (using skip = 2), contained variable names variable descriptions, set column names cnames, created Step 1. Now column types guessed correctly. want way save metadata without polluting actual data, can third read using n_max = 1: vignette adapted post Alison Hill’s blog.","code":"(clippy2 <- readxl_example(\"clippy.xlsx\") %>%    read_excel(sheet = 2, skip = 2, col_names = cnames)) #> # A tibble: 1 × 4 #>   name   species   death               weight #>   <chr>  <chr>     <dttm>               <dbl> #> 1 Clippy paperclip 2007-01-01 00:00:00    0.9 (clippy_meta <- readxl_example(\"clippy.xlsx\") %>%    read_excel(sheet = 2, n_max = 1)) #> # A tibble: 1 × 4 #>   name       species              death                 weight     #>   <chr>      <chr>                <chr>                 <chr>      #> 1 (at birth) (office supply type) (date is approximate) (in grams)"},{"path":"https://readxl.tidyverse.org/dev/articles/readxl-workflows.html","id":"load-packages","dir":"Articles","previous_headings":"","what":"Load packages","title":"readxl Workflows","text":"load tidyverse metapackage workflows show readxl working readr, purrr, etc. See last section solutions using base R (readxl). must load readxl explicitly part core tidyverse.","code":"library(tidyverse) #> ── Attaching core tidyverse packages ─────────────── tidyverse 2.0.0 ── #> ✔ dplyr     1.1.4     ✔ readr     2.1.5 #> ✔ forcats   1.0.0     ✔ stringr   1.5.1 #> ✔ ggplot2   3.5.1     ✔ tibble    3.2.1 #> ✔ lubridate 1.9.4     ✔ tidyr     1.3.1 #> ✔ purrr     1.0.4      #> ── Conflicts ───────────────────────────────── tidyverse_conflicts() ── #> ✖ dplyr::filter() masks stats::filter() #> ✖ dplyr::lag()    masks stats::lag() #> ℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors library(readxl)"},{"path":"https://readxl.tidyverse.org/dev/articles/readxl-workflows.html","id":"cache-a-csv-snapshot","dir":"Articles","previous_headings":"","what":"Cache a CSV snapshot","title":"readxl Workflows","text":"Break analyses logical steps, via series scripts relate one theme, “clean data” “make exploratory diagnostic plots”. forces transmit info step step + 1 via set output files. cumulative outputs steps 1, 2, …, available inputs steps + 1 beyond. outputs constitute API analysis, .e. provide clean entry points can used (understood) isolation, possibly using entirely different toolkit. Contrast alternative writing one monolithic script transmitting entire workspaces via save(), load(), R-specific .rds files. raw data stored Excel spreadsheet, limits ability inspect solving little puzzles crop dowstream work. ’ll need fire Excel (similar) get busy mouse. certainly can’t poke around view diffs GitHub. Solution: cache CSV snapshot raw data tables time export. Even use read_excel() end--end reproducibility, complementary CSV leaves analysis accessible state. Pipe output read_excel() directly readr::write_csv() like : work? readr::write_csv() well-mannered “write” function: main job returns input invisibly. command reads iris sheet readxl’s datasets.xlsx example workbook caches CSV version resulting data frame file. Let’s check. still import data? write CSV file? Yes! data written CSV exact copy imported Excel? Yes! needed restart troubleshoot fictional analysis, iris-raw.csv available second, highly accessible alternative datasets.xlsx.","code":"mtcars_xl <- readxl_example(\"datasets.xlsx\") %>%    read_excel(sheet = \"mtcars\") %>%    write_csv(\"mtcars-raw.csv\") mtcars_xl #> # A tibble: 32 × 11 #>     mpg   cyl  disp    hp  drat    wt  qsec    vs    am  gear  carb #>   <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> #> 1  21       6   160   110  3.9   2.62  16.5     0     1     4     4 #> 2  21       6   160   110  3.9   2.88  17.0     0     1     4     4 #> 3  22.8     4   108    93  3.85  2.32  18.6     1     1     4     1 #> # ℹ 29 more rows dir(pattern = \"mtcars\") #> [1] \"mtcars-raw.csv\" mtcars_alt <- read_csv(\"mtcars-raw.csv\") #> Rows: 32 Columns: 11 #> ── Column specification ─────────────────────────────────────────────── #> Delimiter: \",\" #> dbl (11): mpg, cyl, disp, hp, drat, wt, qsec, vs, am, gear, carb #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. ## readr leaves a note-to-self in `spec` that records its column guessing, ## so we remove that attribute before the check attr(mtcars_alt, \"spec\") <- NULL identical(mtcars_xl, mtcars_alt) #> [1] FALSE"},{"path":"https://readxl.tidyverse.org/dev/articles/readxl-workflows.html","id":"iterate-over-multiple-worksheets-in-a-workbook","dir":"Articles","previous_headings":"","what":"Iterate over multiple worksheets in a workbook","title":"readxl Workflows","text":"Excel workbooks contain data tempted ask “, God, data stored Excel? store series CSV files?” One possible answer : workbook structure keeps together. Let’s accept happens entirely crazy. can efficiently load R? ’s load sheets workbook list data frames: Get worksheet names self-named character vector (names propagate nicely). Use purrr::map() iterate sheet reading.","code":"path <- readxl_example(\"datasets.xlsx\") path %>%    excel_sheets() %>%    set_names() %>%    map(read_excel, path = path) #> $mtcars #> # A tibble: 32 × 11 #>     mpg   cyl  disp    hp  drat    wt  qsec    vs    am  gear  carb #>   <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> #> 1  21       6   160   110  3.9   2.62  16.5     0     1     4     4 #> 2  21       6   160   110  3.9   2.88  17.0     0     1     4     4 #> 3  22.8     4   108    93  3.85  2.32  18.6     1     1     4     1 #> # ℹ 29 more rows #>  #> $chickwts #> # A tibble: 71 × 2 #>   weight feed      #>    <dbl> <chr>     #> 1    179 horsebean #> 2    160 horsebean #> 3    136 horsebean #> # ℹ 68 more rows #>  #> $quakes #> # A tibble: 1,000 × 5 #>     lat  long depth   mag stations #>   <dbl> <dbl> <dbl> <dbl>    <dbl> #> 1 -20.4  182.   562   4.8       41 #> 2 -20.6  181.   650   4.2       15 #> 3 -26    184.    42   5.4       43 #> # ℹ 997 more rows"},{"path":"https://readxl.tidyverse.org/dev/articles/readxl-workflows.html","id":"csv-caching-and-iterating-over-sheets","dir":"Articles","previous_headings":"","what":"CSV caching and iterating over sheets","title":"readxl Workflows","text":"want read sheets simultaneously cache CSV? define read_then_csv() read_excel(...) %>% write_csv() use purrr::map() . even define --fly anonymous function inside map(), think readable. real analysis, starting workbook \"foo.xlsx\", might want create directory foo place CSVs inside .","code":"read_then_csv <- function(sheet, path) {   pathbase <- path %>%     basename() %>%     tools::file_path_sans_ext()   path %>%     read_excel(sheet = sheet) %>%      write_csv(paste0(pathbase, \"-\", sheet, \".csv\")) } path <- readxl_example(\"datasets.xlsx\") path %>%   excel_sheets() %>%   set_names() %>%    map(read_then_csv, path = path) #> $mtcars #> # A tibble: 32 × 11 #>     mpg   cyl  disp    hp  drat    wt  qsec    vs    am  gear  carb #>   <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> #> 1  21       6   160   110  3.9   2.62  16.5     0     1     4     4 #> 2  21       6   160   110  3.9   2.88  17.0     0     1     4     4 #> 3  22.8     4   108    93  3.85  2.32  18.6     1     1     4     1 #> # ℹ 29 more rows #>  #> $chickwts #> # A tibble: 71 × 2 #>   weight feed      #>    <dbl> <chr>     #> 1    179 horsebean #> 2    160 horsebean #> 3    136 horsebean #> # ℹ 68 more rows #>  #> $quakes #> # A tibble: 1,000 × 5 #>     lat  long depth   mag stations #>   <dbl> <dbl> <dbl> <dbl>    <dbl> #> 1 -20.4  182.   562   4.8       41 #> 2 -20.6  181.   650   4.2       15 #> 3 -26    184.    42   5.4       43 #> # ℹ 997 more rows dir(pattern = \"^datasets.*\\\\.csv$\") #> [1] \"datasets-chickwts.csv\" \"datasets-mtcars.csv\"   #> [3] \"datasets-quakes.csv\""},{"path":"https://readxl.tidyverse.org/dev/articles/readxl-workflows.html","id":"concatenate-worksheets-into-one-data-frame","dir":"Articles","previous_headings":"","what":"Concatenate worksheets into one data frame","title":"readxl Workflows","text":"datasets found different sheets variables? ’ll want row-bind , import, form one big, beautiful data frame. readxl ships example sheet deaths.xlsx, containing data famous people died 2016 2017. two worksheets named “arts” “”, spreadsheet layout data tables variables, e.g., name date death. map() function purrr makes easy iterate worksheets. Use purrr::list_rbind() glue together resulting data frames. Store self-named vector worksheet names (critical ID variable ). Use purrr::map() %>% purrr::list_rbind() import data, create ID variable source worksheet, row bind. Note use range = \"A5:E15\" . deaths.xlsx typical spreadsheet includes non-data lines top bottom argument specifies data rectangle lives.","code":"path <- readxl_example(\"deaths.xlsx\") deaths <- path %>%   excel_sheets() %>%   set_names() %>%    map(~ read_excel(path = path, sheet = .x, range = \"A5:F15\")) %>%   list_rbind(names_to = \"sheet\") print(deaths, n = Inf) #> # A tibble: 20 × 7 #>    sheet Name           Profession   Age `Has kids` `Date of birth`     #>    <chr> <chr>          <chr>      <dbl> <lgl>      <dttm>              #>  1 arts  David Bowie    musician      69 TRUE       1947-01-08 00:00:00 #>  2 arts  Carrie Fisher  actor         60 TRUE       1956-10-21 00:00:00 #>  3 arts  Chuck Berry    musician      90 TRUE       1926-10-18 00:00:00 #>  4 arts  Bill Paxton    actor         61 TRUE       1955-05-17 00:00:00 #>  5 arts  Prince         musician      57 TRUE       1958-06-07 00:00:00 #>  6 arts  Alan Rickman   actor         69 FALSE      1946-02-21 00:00:00 #>  7 arts  Florence Hend… actor         82 TRUE       1934-02-14 00:00:00 #>  8 arts  Harper Lee     author        89 FALSE      1926-04-28 00:00:00 #>  9 arts  Zsa Zsa Gábor  actor         99 TRUE       1917-02-06 00:00:00 #> 10 arts  George Michael musician      53 FALSE      1963-06-25 00:00:00 #> 11 other Vera Rubin     scientist     88 TRUE       1928-07-23 00:00:00 #> 12 other Mohamed Ali    athlete       74 TRUE       1942-01-17 00:00:00 #> 13 other Morley Safer   journalist    84 TRUE       1931-11-08 00:00:00 #> 14 other Fidel Castro   politician    90 TRUE       1926-08-13 00:00:00 #> 15 other Antonin Scalia lawyer        79 TRUE       1936-03-11 00:00:00 #> 16 other Jo Cox         politician    41 TRUE       1974-06-22 00:00:00 #> 17 other Janet Reno     lawyer        78 FALSE      1938-07-21 00:00:00 #> 18 other Gwen Ifill     journalist    61 FALSE      1955-09-29 00:00:00 #> 19 other John Glenn     astronaut     95 TRUE       1921-07-28 00:00:00 #> 20 other Pat Summit     coach         64 TRUE       1952-06-14 00:00:00 #> # ℹ 1 more variable: `Date of death` <dttm>"},{"path":"https://readxl.tidyverse.org/dev/articles/readxl-workflows.html","id":"putting-it-all-together","dir":"Articles","previous_headings":"","what":"Putting it all together","title":"readxl Workflows","text":"now: Multiple worksheets feeding one data frame Sheet-specific target rectangles Cache CSV upon import Even though worksheets deaths.xlsx layout, ’ll pretend don’t specify target rectangle two different ways . shows can work worksheet ’s peculiar geometry. ’s workflow: Store self-named vector worksheet names. Store vector cell range specifications. Use purrr::map2() %>% purrr::list_rbind() iterate two vectors parallel, importing data, row binding, creating ID variable source worksheet. Cache unified data CSV.","code":"path <- readxl_example(\"deaths.xlsx\") sheets <- path %>%   excel_sheets() %>%    set_names() ranges <- list(\"A5:F15\", cell_rows(5:15)) deaths <- map2(   sheets,   ranges,   ~ read_excel(path, sheet = .x, range = .y) ) %>%   list_rbind(names_to = \"sheet\") %>%   write_csv(\"deaths.csv\") print(deaths, n = Inf) #> # A tibble: 20 × 7 #>    sheet Name           Profession   Age `Has kids` `Date of birth`     #>    <chr> <chr>          <chr>      <dbl> <lgl>      <dttm>              #>  1 arts  David Bowie    musician      69 TRUE       1947-01-08 00:00:00 #>  2 arts  Carrie Fisher  actor         60 TRUE       1956-10-21 00:00:00 #>  3 arts  Chuck Berry    musician      90 TRUE       1926-10-18 00:00:00 #>  4 arts  Bill Paxton    actor         61 TRUE       1955-05-17 00:00:00 #>  5 arts  Prince         musician      57 TRUE       1958-06-07 00:00:00 #>  6 arts  Alan Rickman   actor         69 FALSE      1946-02-21 00:00:00 #>  7 arts  Florence Hend… actor         82 TRUE       1934-02-14 00:00:00 #>  8 arts  Harper Lee     author        89 FALSE      1926-04-28 00:00:00 #>  9 arts  Zsa Zsa Gábor  actor         99 TRUE       1917-02-06 00:00:00 #> 10 arts  George Michael musician      53 FALSE      1963-06-25 00:00:00 #> 11 other Vera Rubin     scientist     88 TRUE       1928-07-23 00:00:00 #> 12 other Mohamed Ali    athlete       74 TRUE       1942-01-17 00:00:00 #> 13 other Morley Safer   journalist    84 TRUE       1931-11-08 00:00:00 #> 14 other Fidel Castro   politician    90 TRUE       1926-08-13 00:00:00 #> 15 other Antonin Scalia lawyer        79 TRUE       1936-03-11 00:00:00 #> 16 other Jo Cox         politician    41 TRUE       1974-06-22 00:00:00 #> 17 other Janet Reno     lawyer        78 FALSE      1938-07-21 00:00:00 #> 18 other Gwen Ifill     journalist    61 FALSE      1955-09-29 00:00:00 #> 19 other John Glenn     astronaut     95 TRUE       1921-07-28 00:00:00 #> 20 other Pat Summit     coach         64 TRUE       1952-06-14 00:00:00 #> # ℹ 1 more variable: `Date of death` <dttm>"},{"path":"https://readxl.tidyverse.org/dev/articles/readxl-workflows.html","id":"base-version","dir":"Articles","previous_headings":"","what":"Base version","title":"readxl Workflows","text":"Rework examples using base R , readxl.","code":""},{"path":"https://readxl.tidyverse.org/dev/articles/readxl-workflows.html","id":"cache-a-csv-snapshot-1","dir":"Articles","previous_headings":"Base version","what":"Cache a CSV snapshot","title":"readxl Workflows","text":"","code":"mtcars_xl <- read_excel(readxl_example(\"datasets.xlsx\"), sheet = \"mtcars\") write.csv(iris_xl, \"mtcars-raw.csv\", row.names = FALSE, quote = FALSE) mtcars_alt <- read.csv(\"mtcars-raw.csv\", stringsAsFactors = FALSE) ## coerce iris_xl back to a data.frame identical(as.data.frame(mtcars_xl), mtcars_alt)"},{"path":"https://readxl.tidyverse.org/dev/articles/readxl-workflows.html","id":"iterate-over-multiple-worksheets-in-a-workbook-1","dir":"Articles","previous_headings":"Base version","what":"Iterate over multiple worksheets in a workbook","title":"readxl Workflows","text":"","code":"path <- readxl_example(\"datasets.xls\") sheets <- excel_sheets(path) xl_list <- lapply(excel_sheets(path), read_excel, path = path)  names(xl_list) <- sheets"},{"path":"https://readxl.tidyverse.org/dev/articles/readxl-workflows.html","id":"csv-caching-and-iterating-over-sheets-1","dir":"Articles","previous_headings":"Base version","what":"CSV caching and iterating over sheets","title":"readxl Workflows","text":"","code":"read_then_csv <- function(sheet, path) {   pathbase <- tools::file_path_sans_ext(basename(path))   df <- read_excel(path = path, sheet = sheet)   write.csv(df, paste0(pathbase, \"-\", sheet, \".csv\"),             quote = FALSE, row.names = FALSE)   df } path <- readxl_example(\"datasets.xlsx\") sheets <- excel_sheets(path) xl_list <- lapply(excel_sheets(path), read_then_csv, path = path) names(xl_list) <- sheets"},{"path":"https://readxl.tidyverse.org/dev/articles/readxl-workflows.html","id":"concatenate-worksheets-into-one-data-frame-1","dir":"Articles","previous_headings":"Base version","what":"Concatenate worksheets into one data frame","title":"readxl Workflows","text":"","code":"path <- readxl_example(\"deaths.xlsx\") sheets <- excel_sheets(path) xl_list <-   lapply(excel_sheets(path), read_excel, path = path, range = \"A5:F15\") xl_list <- lapply(seq_along(sheets), function(i) {   data.frame(sheet = I(sheets[i]), xl_list[[i]]) }) xl_list <- do.call(rbind, xl_list)"},{"path":"https://readxl.tidyverse.org/dev/articles/readxl-workflows.html","id":"putting-it-all-together-1","dir":"Articles","previous_headings":"Base version","what":"Putting it all together","title":"readxl Workflows","text":"","code":"path <- readxl_example(\"deaths.xlsx\") sheets <- excel_sheets(path) ranges <- list(\"A5:F15\", cell_rows(5:15)) xl_list <- mapply(function(x, y) {   read_excel(path = path, sheet = x, range = y) }, sheets, ranges, SIMPLIFY = FALSE) xl_list <- lapply(seq_along(sheets), function(i) {   data.frame(sheet = I(sheets[i]), xl_list[[i]]) }) xl_list <- do.call(rbind, xl_list) write.csv(xl_list, \"deaths.csv\", row.names = FALSE, quote = FALSE)"},{"path":"https://readxl.tidyverse.org/dev/articles/sheet-geometry.html","id":"little-known-excel-facts","dir":"Articles","previous_headings":"","what":"Little known Excel facts","title":"Sheet Geometry","text":"readxl’s behavior interface may easier understand understand Excel: Cells can see don’t necessarily exist. Cells look blank aren’t necessarily . Among lots information, Excel files obviously must contain information cell. Let’s use word “item” denote one cell’s-worth info. Just see cell screen Excel, doesn’t mean ’s corresponding item file. ? Excel presents huge gridded canvas write . actually populate cell, though, doesn’t really exist. stream cell items describes existing cells, going upper left lower right, travelling row. Blank cells simply exist . Ah, blank cell? cells appear blank naked eye considered Excel , indeed, represented cell item. happens cell content associated format. format applied directly single cell , often, indirectly via formatting applied entire row column. human spent quality time spreadsheet, many seemingly empty cells bear format thus associated cell item.","code":""},{"path":"https://readxl.tidyverse.org/dev/articles/sheet-geometry.html","id":"implications-for-readxl","dir":"Articles","previous_headings":"Little known Excel facts","what":"Implications for readxl","title":"Sheet Geometry","text":"readxl reads cell items content. ignores cell items exist strictly convey formatting. tibble returned readxl often cover cells empty spreadsheet, filled NA. reason associated row column exist: actual data user-specified geometry.","code":""},{"path":"https://readxl.tidyverse.org/dev/articles/sheet-geometry.html","id":"skip-and-n_max","dir":"Articles","previous_headings":"","what":"skip and n_max","title":"Sheet Geometry","text":"skip n_max “entry-level” solution controlling data rectangle. work row direction. Column-wise, ’re letting readxl discover columns populated. specify range (covered ), skip n_max ignored.","code":""},{"path":"https://readxl.tidyverse.org/dev/articles/sheet-geometry.html","id":"skip","dir":"Articles","previous_headings":"skip and n_max","what":"skip","title":"Sheet Geometry","text":"skip argument tells read_excel() start looking populated cells skipping least skip rows. new start point begins 1 empty rows, read_excel() skip even starts reading sheet. ’s screen shot geometry.xlsx example sheet ships readxl, accessible via readxl_example(\"geometry.xlsx\"). <img src=“img/geometry.png” alt=“Screenshot ”geometry.xlsx” example spreadsheet. cells range B3:D6 populated, string cell’s address. example, cell B3 contains string “B3”.” width=“70%” /> default, read_excel() just discovers data rectangle: explicitly skip one row, note read_excel() still skips row 2, also empty, leading result : can also use skip skip populated cells. real life, mighty weapon explanatory text people like include top spreadsheets. Summary: skip tells read_excel() skip least many spreadsheet rows reading anything.","code":"read_excel(readxl_example(\"geometry.xlsx\")) #> # A tibble: 3 × 3 #>   B3    C3    D3    #>   <chr> <chr> <chr> #> 1 B4    C4    D4    #> 2 B5    C5    D5    #> 3 B6    C6    D6 read_excel(readxl_example(\"geometry.xlsx\"), skip = 1) #> # A tibble: 3 × 3 #>   B3    C3    D3    #>   <chr> <chr> <chr> #> 1 B4    C4    D4    #> 2 B5    C5    D5    #> 3 B6    C6    D6 read_excel(readxl_example(\"geometry.xlsx\"), skip = 3) #> # A tibble: 2 × 3 #>   B4    C4    D4    #>   <chr> <chr> <chr> #> 1 B5    C5    D5    #> 2 B6    C6    D6"},{"path":"https://readxl.tidyverse.org/dev/articles/sheet-geometry.html","id":"n_max","dir":"Articles","previous_headings":"skip and n_max","what":"n_max","title":"Sheet Geometry","text":"n_max argument tells read_excel() read n_max rows, found data rectangle. Note n_max specifically data. still use col_names express whether first spreadsheet row used create column names (default TRUE). n_max = 2 causes us ignore last data row – 3rd one – geometry.xlsx. n_max upper bound. never cause empty rows included tibble. Note get 3 data rows , even though n_max much greater.","code":"read_excel(readxl_example(\"geometry.xlsx\"), n_max = 2) #> # A tibble: 2 × 3 #>   B3    C3    D3    #>   <chr> <chr> <chr> #> 1 B4    C4    D4    #> 2 B5    C5    D5 read_excel(readxl_example(\"geometry.xlsx\"), n_max = 1000) #> # A tibble: 3 × 3 #>   B3    C3    D3    #>   <chr> <chr> <chr> #> 1 B4    C4    D4    #> 2 B5    C5    D5    #> 3 B6    C6    D6"},{"path":"https://readxl.tidyverse.org/dev/articles/sheet-geometry.html","id":"range","dir":"Articles","previous_headings":"","what":"range","title":"Sheet Geometry","text":"range argument flexible way control geometry powered cellranger package. One huge difference skip n_max range taken literally! Even means returned tibble entire rows columns consisting NA. can describe cell limits variety ways: Excel-style range: Specify fixed rectangle range = \"A1:D4\" range = \"R1C1:R4C4\". can even prepend worksheet name like : range = \"foofy!A1:D4\" passed along sheet argument. deaths.xlsx example sheet features junk rows data rectangle. payoff specifying data rectangle precisely get data frame want, correct guesses column types. repeat screenshot geometry.xlsx visual reference. <img src=“img/geometry.png” alt=“Screenshot ”geometry.xlsx” example spreadsheet. cells range B3:D6 populated, string cell’s address. example, cell B3 contains string “B3”.” width=“70%” /> Going back geometry.xlsx, specify rectangle partially overlaps data. Note use default column names, first row cells empty, leading column NAs. Specific range rows columns: Set exact limits just rows just columns allow limits direction discovered. Example calls: use geometry.xlsx demonstrate setting hard limits rows, running past data, allowing column limits discovered. Note trailing rows NA. Anchored rectangle: Helper functions anchored() cell_limits() let specify limits via corner(s) rectangle. get 3 4 rectangle cell C5 upper left corner: set C5 upper left corner allow limits discovered:","code":"read_excel(readxl_example(\"deaths.xlsx\"), range = \"arts!A5:F15\") #> # A tibble: 10 × 6 #>   Name          Profession   Age `Has kids` `Date of birth`     #>   <chr>         <chr>      <dbl> <lgl>      <dttm>              #> 1 David Bowie   musician      69 TRUE       1947-01-08 00:00:00 #> 2 Carrie Fisher actor         60 TRUE       1956-10-21 00:00:00 #> 3 Chuck Berry   musician      90 TRUE       1926-10-18 00:00:00 #> 4 Bill Paxton   actor         61 TRUE       1955-05-17 00:00:00 #> # ℹ 6 more rows #> # ℹ 1 more variable: `Date of death` <dttm> read_excel(readxl_example(\"geometry.xlsx\"), range = \"A2:C4\") #> New names: #> • `` -> `...1` #> • `` -> `...2` #> • `` -> `...3` #> # A tibble: 2 × 3 #>   ...1  ...2  ...3  #>   <lgl> <chr> <chr> #> 1 NA    B3    C3    #> 2 NA    B4    C4 ## rows only read_excel(..., range = cell_rows(1:10)) ## is equivalent to read_excel(..., range = cell_rows(c(1, 10)))  ## columns only read_excel(..., range = cell_cols(1:26)) ## is equivalent to all of these read_excel(..., range = cell_cols(c(1, 26))) read_excel(..., range = cell_cols(\"A:Z\")) read_excel(..., range = cell_cols(LETTERS)) read_excel(..., range = cell_cols(c(\"A\", \"Z\")) read_excel(readxl_example(\"geometry.xlsx\"), range = cell_rows(4:8)) #> # A tibble: 4 × 3 #>   B4    C4    D4    #>   <chr> <chr> <chr> #> 1 B5    C5    D5    #> 2 B6    C6    D6    #> 3 NA    NA    NA    #> 4 NA    NA    NA read_excel(   readxl_example(\"geometry.xlsx\"),   col_names = paste(\"var\", 1:4, sep = \"_\"),   range = anchored(\"C5\", c(3, 4)) ) #> # A tibble: 3 × 4 #>   var_1 var_2 var_3 var_4 #>   <chr> <chr> <lgl> <lgl> #> 1 C5    D5    NA    NA    #> 2 C6    D6    NA    NA    #> 3 NA    NA    NA    NA read_excel(   readxl_example(\"geometry.xlsx\"),   col_names = FALSE,   range = cell_limits(c(5, 3), c(NA, NA)) ) #> New names: #> • `` -> `...1` #> • `` -> `...2` #> # A tibble: 2 × 2 #>   ...1  ...2  #>   <chr> <chr> #> 1 C5    D5    #> 2 C6    D6"},{"path":"https://readxl.tidyverse.org/dev/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Hadley Wickham. Author. Jennifer Bryan. Author, maintainer. . Copyright holder, funder.           Copyright holder R code C/C++ code without explicit copyright attribution Marcin Kalicinski. Contributor, copyright holder.           Author included RapidXML code Komarov Valery. Contributor, copyright holder.           Author included libxls code Christophe Leitienne. Contributor, copyright holder.           Author included libxls code Bob Colbert. Contributor, copyright holder.           Author included libxls code David Hoerl. Contributor, copyright holder.           Author included libxls code Evan Miller. Contributor, copyright holder.           Author included libxls code","code":""},{"path":"https://readxl.tidyverse.org/dev/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Wickham H, Bryan J (2025). readxl: Read Excel Files. R package version 1.4.3.9000, https://github.com/tidyverse/readxl, https://readxl.tidyverse.org.","code":"@Manual{,   title = {readxl: Read Excel Files},   author = {Hadley Wickham and Jennifer Bryan},   year = {2025},   note = {R package version 1.4.3.9000, https://github.com/tidyverse/readxl},   url = {https://readxl.tidyverse.org}, }"},{"path":[]},{"path":"https://readxl.tidyverse.org/dev/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"Read Excel Files","text":"readxl package makes easy get data Excel R. Compared many existing packages (e.g. gdata, xlsx, xlsReadWrite) readxl external dependencies, ’s easy install use operating systems. designed work tabular data. readxl supports legacy .xls format modern xml-based .xlsx format. libxls C library used support .xls, abstracts away many complexities underlying binary format. parse .xlsx, use RapidXML C++ library.","code":""},{"path":"https://readxl.tidyverse.org/dev/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Read Excel Files","text":"easiest way install latest released version CRAN install whole tidyverse. NOTE: still need load readxl explicitly, core tidyverse package loaded via library(tidyverse). Alternatively, install just readxl CRAN: install development version GitHub:","code":"install.packages(\"tidyverse\") install.packages(\"readxl\") #install.packages(\"pak\") pak::pak(\"tidyverse/readxl\")"},{"path":"https://readxl.tidyverse.org/dev/index.html","id":"cheatsheet","dir":"","previous_headings":"","what":"Cheatsheet","title":"Read Excel Files","text":"can see read data readxl data import cheatsheet, also covers similar functionality related packages readr googlesheets4.","code":""},{"path":"https://readxl.tidyverse.org/dev/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"Read Excel Files","text":"readxl includes several example files, use throughout documentation. Use helper readxl_example() arguments list call example filename get path. read_excel() reads xls xlsx files detects format extension. List sheet names excel_sheets(). Specify worksheet name number. various ways control cells read. can even specify sheet , providing Excel-style cell range. NAs represented something blank cells, set na argument. new tidyverse conventions data import, may want consult data import chapter R Data Science. readxl become increasingly consistent packages, readr.","code":"library(readxl) readxl_example() #>  [1] \"clippy.xls\"    \"clippy.xlsx\"   \"datasets.xls\"  \"datasets.xlsx\" #>  [5] \"deaths.xls\"    \"deaths.xlsx\"   \"geometry.xls\"  \"geometry.xlsx\" #>  [9] \"type-me.xls\"   \"type-me.xlsx\" readxl_example(\"clippy.xls\") #> [1] \"/Users/fontikar/Library/R/arm64/4.4/library/readxl/extdata/clippy.xls\" xlsx_example <- readxl_example(\"datasets.xlsx\") read_excel(xlsx_example) #> # A tibble: 32 × 11 #>     mpg   cyl  disp    hp  drat    wt  qsec    vs    am  gear  carb #>   <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> #> 1  21       6   160   110  3.9   2.62  16.5     0     1     4     4 #> 2  21       6   160   110  3.9   2.88  17.0     0     1     4     4 #> 3  22.8     4   108    93  3.85  2.32  18.6     1     1     4     1 #> # ℹ 29 more rows  xls_example <- readxl_example(\"datasets.xls\") read_excel(xls_example) #> # A tibble: 32 × 11 #>     mpg   cyl  disp    hp  drat    wt  qsec    vs    am  gear  carb #>   <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> #> 1  21       6   160   110  3.9   2.62  16.5     0     1     4     4 #> 2  21       6   160   110  3.9   2.88  17.0     0     1     4     4 #> 3  22.8     4   108    93  3.85  2.32  18.6     1     1     4     1 #> # ℹ 29 more rows excel_sheets(xlsx_example) #> [1] \"mtcars\"   \"chickwts\" \"quakes\" read_excel(xlsx_example, sheet = \"chickwts\") #> # A tibble: 71 × 2 #>   weight feed      #>    <dbl> <chr>     #> 1    179 horsebean #> 2    160 horsebean #> 3    136 horsebean #> # ℹ 68 more rows read_excel(xls_example, sheet = 3) #> # A tibble: 1,000 × 5 #>     lat  long depth   mag stations #>   <dbl> <dbl> <dbl> <dbl>    <dbl> #> 1 -20.4  182.   562   4.8       41 #> 2 -20.6  181.   650   4.2       15 #> 3 -26    184.    42   5.4       43 #> # ℹ 997 more rows read_excel(xlsx_example, n_max = 3) #> # A tibble: 3 × 11 #>     mpg   cyl  disp    hp  drat    wt  qsec    vs    am  gear  carb #>   <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> #> 1  21       6   160   110  3.9   2.62  16.5     0     1     4     4 #> 2  21       6   160   110  3.9   2.88  17.0     0     1     4     4 #> 3  22.8     4   108    93  3.85  2.32  18.6     1     1     4     1 read_excel(xlsx_example, range = \"C1:E4\") #> # A tibble: 3 × 3 #>    disp    hp  drat #>   <dbl> <dbl> <dbl> #> 1   160   110  3.9  #> 2   160   110  3.9  #> 3   108    93  3.85 read_excel(xlsx_example, range = cell_rows(1:4)) #> # A tibble: 3 × 11 #>     mpg   cyl  disp    hp  drat    wt  qsec    vs    am  gear  carb #>   <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> #> 1  21       6   160   110  3.9   2.62  16.5     0     1     4     4 #> 2  21       6   160   110  3.9   2.88  17.0     0     1     4     4 #> 3  22.8     4   108    93  3.85  2.32  18.6     1     1     4     1 read_excel(xlsx_example, range = cell_cols(\"B:D\")) #> # A tibble: 32 × 3 #>     cyl  disp    hp #>   <dbl> <dbl> <dbl> #> 1     6   160   110 #> 2     6   160   110 #> 3     4   108    93 #> # ℹ 29 more rows read_excel(xlsx_example, range = \"mtcars!B1:D5\") #> # A tibble: 4 × 3 #>     cyl  disp    hp #>   <dbl> <dbl> <dbl> #> 1     6   160   110 #> 2     6   160   110 #> 3     4   108    93 #> # ℹ 1 more row read_excel(xlsx_example, na = \"0\") #> # A tibble: 32 × 11 #>     mpg   cyl  disp    hp  drat    wt  qsec    vs    am  gear  carb #>   <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> #> 1  21       6   160   110  3.9   2.62  16.5    NA     1     4     4 #> 2  21       6   160   110  3.9   2.88  17.0    NA     1     4     4 #> 3  22.8     4   108    93  3.85  2.32  18.6     1     1     4     1 #> # ℹ 29 more rows"},{"path":"https://readxl.tidyverse.org/dev/index.html","id":"articles","dir":"","previous_headings":"","what":"Articles","title":"Read Excel Files","text":"Broad topics explained articles: Cell Column Types Sheet Geometry: specify cells read readxl Workflows: Iterating multiple tabs worksheets, stashing csv snapshot also focused articles address specific aggravations presented world’s spreadsheets: Column Names Multiple Header Rows","code":""},{"path":"https://readxl.tidyverse.org/dev/index.html","id":"features","dir":"","previous_headings":"","what":"Features","title":"Read Excel Files","text":"external dependency , e.g., Java Perl. Re-encodes non-ASCII characters UTF-8. Loads datetimes POSIXct columns. Windows (1900) Mac (1904) date specifications processed correctly. Discovers minimal data rectangle returns , default. User can exert control range, skip, n_max. Column names types determined data sheet, default. User can also supply via col_names col_types control name repair via .name_repair. Returns tibble, .e. data frame additional tbl_df class. Among things, provide nicer printing.","code":""},{"path":"https://readxl.tidyverse.org/dev/index.html","id":"other-relevant-packages","dir":"","previous_headings":"","what":"Other relevant packages","title":"Read Excel Files","text":"packages functionality complementary readxl also avoid Java dependency. Writing Excel files: example files datasets.xlsx datasets.xls created help openxlsx (Excel). openxlsx provides “high level interface writing, styling editing worksheets”. writexl new option space, first released CRAN August 2017. ’s portable lightweight way export data frame xlsx, based libxlsxwriter. much minimalistic openxlsx, simple examples, appears twice fast write smaller files. Non-tabular data formatting: tidyxl focused importing awkward non-tabular data Excel. also “exposes cell content, position formatting tidy structure manipulation”.","code":"l <- list(mtcars = mtcars, chickwts = chickwts, quakes = quakes) openxlsx::write.xlsx(l, file = \"inst/extdata/datasets.xlsx\")"},{"path":"https://readxl.tidyverse.org/dev/reference/cell-specification.html","id":null,"dir":"Reference","previous_headings":"","what":"Specify cells for reading — cell-specification","title":"Specify cells for reading — cell-specification","text":"range argument read_excel() provides many ways limit read specific rectangle cells. simplest usage provide Excel-like cell range, range = \"D12:F15\" range =\"R1C12:R6C15\". cell rectangle can specified various ways, using helper functions. can find examples sheet geometry vignette. cases, cell range processing handled cellranger package, can find full documentation functions used examples .","code":""},{"path":[]},{"path":"https://readxl.tidyverse.org/dev/reference/cell-specification.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Specify cells for reading — cell-specification","text":"","code":"path <- readxl_example(\"geometry.xls\") ## Rows 1 and 2 are empty (as are rows 7 and higher) ## Column 1 aka \"A\" is empty (as are columns 5 of \"E\" and higher)  # By default, the populated data cells are \"shrink-wrapped\" into a # minimal data frame read_excel(path) #> # A tibble: 3 × 3 #>   B3    C3    D3    #>   <chr> <chr> <chr> #> 1 B4    C4    D4    #> 2 B5    C5    D5    #> 3 B6    C6    D6     # Specific rectangle that is subset of populated cells, possibly improper read_excel(path, range = \"B3:D6\") #> # A tibble: 3 × 3 #>   B3    C3    D3    #>   <chr> <chr> <chr> #> 1 B4    C4    D4    #> 2 B5    C5    D5    #> 3 B6    C6    D6    read_excel(path, range = \"C3:D5\") #> # A tibble: 2 × 2 #>   C3    D3    #>   <chr> <chr> #> 1 C4    D4    #> 2 C5    D5     # Specific rectangle that forces inclusion of unpopulated cells read_excel(path, range = \"A3:D5\") #> New names: #> • `` -> `...1` #> # A tibble: 2 × 4 #>   ...1  B3    C3    D3    #>   <lgl> <chr> <chr> <chr> #> 1 NA    B4    C4    D4    #> 2 NA    B5    C5    D5    read_excel(path, range = \"A4:E5\") #> New names: #> • `` -> `...1` #> • `` -> `...5` #> # A tibble: 1 × 5 #>   ...1  B4    C4    D4    ...5  #>   <lgl> <chr> <chr> <chr> <lgl> #> 1 NA    B5    C5    D5    NA    read_excel(path, range = \"C5:E7\") #> New names: #> • `` -> `...3` #> # A tibble: 2 × 3 #>   C5    D5    ...3  #>   <chr> <chr> <lgl> #> 1 C6    D6    NA    #> 2 NA    NA    NA     # Anchor a rectangle of specified size at a particular cell read_excel(path, range = anchored(\"C4\", dim = c(3, 2)), col_names = FALSE) #> New names: #> • `` -> `...1` #> • `` -> `...2` #> # A tibble: 3 × 2 #>   ...1  ...2  #>   <chr> <chr> #> 1 C4    D4    #> 2 C5    D5    #> 3 C6    D6     # Specify only the rows read_excel(path, range = cell_rows(3:5)) #> # A tibble: 2 × 3 #>   B3    C3    D3    #>   <chr> <chr> <chr> #> 1 B4    C4    D4    #> 2 B5    C5    D5    ## is equivalent to read_excel(path, range = cell_rows(c(3, 5))) #> # A tibble: 2 × 3 #>   B3    C3    D3    #>   <chr> <chr> <chr> #> 1 B4    C4    D4    #> 2 B5    C5    D5     # Specify only the columns by column number or letter read_excel(path, range = cell_cols(\"C:D\")) #> # A tibble: 3 × 2 #>   C3    D3    #>   <chr> <chr> #> 1 C4    D4    #> 2 C5    D5    #> 3 C6    D6    read_excel(path, range = cell_cols(2)) #> # A tibble: 3 × 1 #>   B3    #>   <chr> #> 1 B4    #> 2 B5    #> 3 B6     # Specify exactly one row or column bound read_excel(path, range = cell_rows(c(5, NA))) #> # A tibble: 1 × 3 #>   B5    C5    D5    #>   <chr> <chr> <chr> #> 1 B6    C6    D6    read_excel(path, range = cell_rows(c(NA, 4))) #> New names: #> • `` -> `...1` #> • `` -> `...2` #> • `` -> `...3` #> # A tibble: 3 × 3 #>   ...1  ...2  ...3  #>   <chr> <chr> <chr> #> 1 NA    NA    NA    #> 2 B3    C3    D3    #> 3 B4    C4    D4    read_excel(path, range = cell_cols(c(\"C\", NA))) #> # A tibble: 3 × 2 #>   C3    D3    #>   <chr> <chr> #> 1 C4    D4    #> 2 C5    D5    #> 3 C6    D6    read_excel(path, range = cell_cols(c(NA, 2))) #> New names: #> • `` -> `...1` #> # A tibble: 3 × 2 #>   ...1  B3    #>   <lgl> <chr> #> 1 NA    B4    #> 2 NA    B5    #> 3 NA    B6     # General open rectangles # upper left = C4, everything else unspecified read_excel(path, range = cell_limits(c(4, 3), c(NA, NA))) #> # A tibble: 2 × 2 #>   C4    D4    #>   <chr> <chr> #> 1 C5    D5    #> 2 C6    D6    # upper right = D4, everything else unspecified read_excel(path, range = cell_limits(c(4, NA), c(NA, 4))) #> New names: #> • `` -> `...1` #> # A tibble: 2 × 4 #>   ...1  B4    C4    D4    #>   <lgl> <chr> <chr> <chr> #> 1 NA    B5    C5    D5    #> 2 NA    B6    C6    D6"},{"path":"https://readxl.tidyverse.org/dev/reference/excel_format.html","id":null,"dir":"Reference","previous_headings":"","what":"Determine file format — excel_format","title":"Determine file format — excel_format","text":"Determine files xls xlsx (xlsx family). excel_format(guess = TRUE) used read_excel() determine format. draws logic two lower level functions: format_from_ext() attempts determine format file extension. format_from_signature() consults file signature \"magic number\". File extensions associated xlsx vs. xls: xlsx: .xlsx, .xlsm, .xltx, .xltm xls: .xls File signatures (hexadecimal) xlsx vs xls: xlsx: First 4 bytes 50 4B 03 04 xls: First 8 bytes D0 CF 11 E0 A1 B1 1A E1","code":""},{"path":"https://readxl.tidyverse.org/dev/reference/excel_format.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Determine file format — excel_format","text":"","code":"excel_format(path, guess = TRUE)  format_from_ext(path)  format_from_signature(path)"},{"path":"https://readxl.tidyverse.org/dev/reference/excel_format.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Determine file format — excel_format","text":"path Path xls/xlsx file. guess Logical. file extension absent recognized, controls whether attempt guess format based file signature \"magic number\".","code":""},{"path":"https://readxl.tidyverse.org/dev/reference/excel_format.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Determine file format — excel_format","text":"Character vector values \"xlsx\", \"xls\", NA.","code":""},{"path":"https://readxl.tidyverse.org/dev/reference/excel_format.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Determine file format — excel_format","text":"","code":"files <- c(   \"a.xlsx\",   \"b.xls\",   \"c.png\",   file.path(R.home(\"doc\"), \"html\", \"logo.jpg\"),   readxl_example(\"clippy.xlsx\"),   readxl_example(\"deaths.xls\") ) excel_format(files) #> [1] \"xlsx\" \"xls\"  NA     NA     \"xlsx\" \"xls\""},{"path":"https://readxl.tidyverse.org/dev/reference/excel_sheets.html","id":null,"dir":"Reference","previous_headings":"","what":"List all sheets in an excel spreadsheet — excel_sheets","title":"List all sheets in an excel spreadsheet — excel_sheets","text":"list sheet names especially useful want iterate sheets workbook. readxl Workflows article provides several worked examples , showing combine readxl packages tidyverse, purrr, base R functions like lapply().","code":""},{"path":"https://readxl.tidyverse.org/dev/reference/excel_sheets.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List all sheets in an excel spreadsheet — excel_sheets","text":"","code":"excel_sheets(path)"},{"path":"https://readxl.tidyverse.org/dev/reference/excel_sheets.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"List all sheets in an excel spreadsheet — excel_sheets","text":"path Path xls/xlsx file.","code":""},{"path":"https://readxl.tidyverse.org/dev/reference/excel_sheets.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"List all sheets in an excel spreadsheet — excel_sheets","text":"","code":"excel_sheets(readxl_example(\"datasets.xlsx\")) #> [1] \"mtcars\"   \"chickwts\" \"quakes\"   excel_sheets(readxl_example(\"datasets.xls\")) #> [1] \"mtcars\"   \"chickwts\" \"quakes\"    # To load all sheets in a workbook, use lapply() path <- readxl_example(\"datasets.xls\") lapply(excel_sheets(path), read_excel, path = path) #> [[1]] #> # A tibble: 32 × 11 #>      mpg   cyl  disp    hp  drat    wt  qsec    vs    am  gear  carb #>    <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> #>  1  21       6  160    110  3.9   2.62  16.5     0     1     4     4 #>  2  21       6  160    110  3.9   2.88  17.0     0     1     4     4 #>  3  22.8     4  108     93  3.85  2.32  18.6     1     1     4     1 #>  4  21.4     6  258    110  3.08  3.22  19.4     1     0     3     1 #>  5  18.7     8  360    175  3.15  3.44  17.0     0     0     3     2 #>  6  18.1     6  225    105  2.76  3.46  20.2     1     0     3     1 #>  7  14.3     8  360    245  3.21  3.57  15.8     0     0     3     4 #>  8  24.4     4  147.    62  3.69  3.19  20       1     0     4     2 #>  9  22.8     4  141.    95  3.92  3.15  22.9     1     0     4     2 #> 10  19.2     6  168.   123  3.92  3.44  18.3     1     0     4     4 #> # ℹ 22 more rows #>  #> [[2]] #> # A tibble: 71 × 2 #>    weight feed      #>     <dbl> <chr>     #>  1    179 horsebean #>  2    160 horsebean #>  3    136 horsebean #>  4    227 horsebean #>  5    217 horsebean #>  6    168 horsebean #>  7    108 horsebean #>  8    124 horsebean #>  9    143 horsebean #> 10    140 horsebean #> # ℹ 61 more rows #>  #> [[3]] #> # A tibble: 1,000 × 5 #>      lat  long depth   mag stations #>    <dbl> <dbl> <dbl> <dbl>    <dbl> #>  1 -20.4  182.   562   4.8       41 #>  2 -20.6  181.   650   4.2       15 #>  3 -26    184.    42   5.4       43 #>  4 -18.0  182.   626   4.1       19 #>  5 -20.4  182.   649   4         11 #>  6 -19.7  184.   195   4         12 #>  7 -11.7  166.    82   4.8       43 #>  8 -28.1  182.   194   4.4       15 #>  9 -28.7  182.   211   4.7       35 #> 10 -17.5  180.   622   4.3       19 #> # ℹ 990 more rows #>"},{"path":"https://readxl.tidyverse.org/dev/reference/read_excel.html","id":null,"dir":"Reference","previous_headings":"","what":"Read xls and xlsx files — read_excel","title":"Read xls and xlsx files — read_excel","text":"Read xls xlsx files read_excel() calls excel_format() determine path xls xlsx, based file extension file , order. Use read_xls() read_xlsx() directly know better want prevent guessing.","code":""},{"path":"https://readxl.tidyverse.org/dev/reference/read_excel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read xls and xlsx files — read_excel","text":"","code":"read_excel(   path,   sheet = NULL,   range = NULL,   col_names = TRUE,   col_types = NULL,   na = \"\",   trim_ws = TRUE,   skip = 0,   n_max = Inf,   guess_max = min(1000, n_max),   progress = readxl_progress(),   .name_repair = \"unique\" )  read_xls(   path,   sheet = NULL,   range = NULL,   col_names = TRUE,   col_types = NULL,   na = \"\",   trim_ws = TRUE,   skip = 0,   n_max = Inf,   guess_max = min(1000, n_max),   progress = readxl_progress(),   .name_repair = \"unique\" )  read_xlsx(   path,   sheet = NULL,   range = NULL,   col_names = TRUE,   col_types = NULL,   na = \"\",   trim_ws = TRUE,   skip = 0,   n_max = Inf,   guess_max = min(1000, n_max),   progress = readxl_progress(),   .name_repair = \"unique\" )"},{"path":"https://readxl.tidyverse.org/dev/reference/read_excel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read xls and xlsx files — read_excel","text":"path Path xls/xlsx file. sheet Sheet read. Either string (name sheet), integer (position sheet). Ignored sheet specified via range. neither argument specifies sheet, defaults first sheet. range cell range read , described cell-specification. Includes typical Excel ranges like \"B3:D87\", possibly including sheet name like \"Budget!B2:G14\", . Interpreted strictly, even range forces inclusion leading trailing empty rows columns. Takes precedence skip, n_max sheet. col_names TRUE use first row column names, FALSE get default names, character vector giving name column. user provides col_types vector, col_names can one entry per column, .e. length col_types, one entry per unskipped column. col_types Either NULL guess spreadsheet character vector containing one entry per column options: \"skip\", \"guess\", \"logical\", \"numeric\", \"date\", \"text\" \"list\". exactly one col_type specified, recycled. content cell skipped column never read column appear data frame output. list cell loads column list length 1 vectors, typed using type guessing logic col_types = NULL, cell--cell basis. na Character vector strings interpret missing values. default, readxl treats blank cells missing data. trim_ws leading trailing whitespace trimmed? skip Minimum number rows skip reading anything, column names data. Leading empty rows automatically skipped, lower bound. Ignored range given. n_max Maximum number data rows read. Trailing empty rows automatically skipped, upper bound number rows returned tibble. Ignored range given. guess_max Maximum number data rows use guessing column types. progress Display progress spinner? default, spinner appears interactive session, outside context knitting document, call likely run several seconds . See readxl_progress() details. .name_repair Handling column names. Passed along tibble::as_tibble(). readxl's default `.name_repair = \"unique\", ensures column names empty unique.","code":""},{"path":"https://readxl.tidyverse.org/dev/reference/read_excel.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read xls and xlsx files — read_excel","text":"tibble","code":""},{"path":[]},{"path":"https://readxl.tidyverse.org/dev/reference/read_excel.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read xls and xlsx files — read_excel","text":"","code":"datasets <- readxl_example(\"datasets.xlsx\") read_excel(datasets) #> # A tibble: 32 × 11 #>      mpg   cyl  disp    hp  drat    wt  qsec    vs    am  gear  carb #>    <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> #>  1  21       6  160    110  3.9   2.62  16.5     0     1     4     4 #>  2  21       6  160    110  3.9   2.88  17.0     0     1     4     4 #>  3  22.8     4  108     93  3.85  2.32  18.6     1     1     4     1 #>  4  21.4     6  258    110  3.08  3.22  19.4     1     0     3     1 #>  5  18.7     8  360    175  3.15  3.44  17.0     0     0     3     2 #>  6  18.1     6  225    105  2.76  3.46  20.2     1     0     3     1 #>  7  14.3     8  360    245  3.21  3.57  15.8     0     0     3     4 #>  8  24.4     4  147.    62  3.69  3.19  20       1     0     4     2 #>  9  22.8     4  141.    95  3.92  3.15  22.9     1     0     4     2 #> 10  19.2     6  168.   123  3.92  3.44  18.3     1     0     4     4 #> # ℹ 22 more rows  # Specify sheet either by position or by name read_excel(datasets, 2) #> # A tibble: 71 × 2 #>    weight feed      #>     <dbl> <chr>     #>  1    179 horsebean #>  2    160 horsebean #>  3    136 horsebean #>  4    227 horsebean #>  5    217 horsebean #>  6    168 horsebean #>  7    108 horsebean #>  8    124 horsebean #>  9    143 horsebean #> 10    140 horsebean #> # ℹ 61 more rows read_excel(datasets, \"mtcars\") #> # A tibble: 32 × 11 #>      mpg   cyl  disp    hp  drat    wt  qsec    vs    am  gear  carb #>    <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> #>  1  21       6  160    110  3.9   2.62  16.5     0     1     4     4 #>  2  21       6  160    110  3.9   2.88  17.0     0     1     4     4 #>  3  22.8     4  108     93  3.85  2.32  18.6     1     1     4     1 #>  4  21.4     6  258    110  3.08  3.22  19.4     1     0     3     1 #>  5  18.7     8  360    175  3.15  3.44  17.0     0     0     3     2 #>  6  18.1     6  225    105  2.76  3.46  20.2     1     0     3     1 #>  7  14.3     8  360    245  3.21  3.57  15.8     0     0     3     4 #>  8  24.4     4  147.    62  3.69  3.19  20       1     0     4     2 #>  9  22.8     4  141.    95  3.92  3.15  22.9     1     0     4     2 #> 10  19.2     6  168.   123  3.92  3.44  18.3     1     0     4     4 #> # ℹ 22 more rows  # Skip rows and use default column names read_excel(datasets, skip = 10, col_names = FALSE) #> New names: #> • `` -> `...1` #> • `` -> `...2` #> • `` -> `...3` #> • `` -> `...4` #> • `` -> `...5` #> • `` -> `...6` #> • `` -> `...7` #> • `` -> `...8` #> • `` -> `...9` #> • `` -> `...10` #> • `` -> `...11` #> # A tibble: 23 × 11 #>     ...1  ...2  ...3  ...4  ...5  ...6  ...7  ...8  ...9 ...10 ...11 #>    <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> #>  1  19.2     6 168.    123  3.92  3.44  18.3     1     0     4     4 #>  2  17.8     6 168.    123  3.92  3.44  18.9     1     0     4     4 #>  3  16.4     8 276.    180  3.07  4.07  17.4     0     0     3     3 #>  4  17.3     8 276.    180  3.07  3.73  17.6     0     0     3     3 #>  5  15.2     8 276.    180  3.07  3.78  18       0     0     3     3 #>  6  10.4     8 472     205  2.93  5.25  18.0     0     0     3     4 #>  7  10.4     8 460     215  3     5.42  17.8     0     0     3     4 #>  8  14.7     8 440     230  3.23  5.34  17.4     0     0     3     4 #>  9  32.4     4  78.7    66  4.08  2.2   19.5     1     1     4     1 #> 10  30.4     4  75.7    52  4.93  1.62  18.5     1     1     4     2 #> # ℹ 13 more rows  # Recycle a single column type read_excel(datasets, col_types = \"text\") #> # A tibble: 32 × 11 #>    mpg      cyl   disp  hp    drat  wt    qsec  vs    am    gear  carb  #>    <chr>    <chr> <chr> <chr> <chr> <chr> <chr> <chr> <chr> <chr> <chr> #>  1 21       6     160   110   3.9   2.62  16.46 0     1     4     4     #>  2 21       6     160   110   3.9   2.875 17.02 0     1     4     4     #>  3 22.8     4     108   93    3.85  2.31… 18.61 1     1     4     1     #>  4 21.4     6     258   110   3.08  3.21… 19.4… 1     0     3     1     #>  5 18.7     8     360   175   3.15  3.44  17.02 0     0     3     2     #>  6 18.1000… 6     225   105   2.76  3.46  20.22 1     0     3     1     #>  7 14.3     8     360   245   3.21  3.57  15.84 0     0     3     4     #>  8 24.4     4     146.… 62    3.69  3.19  20    1     0     4     2     #>  9 22.8     4     140.… 95    3.92  3.15  22.9  1     0     4     2     #> 10 19.2     6     167.6 123   3.92  3.44  18.3  1     0     4     4     #> # ℹ 22 more rows  # Specify some col_types and guess others read_excel(   readxl_example(\"deaths.xlsx\"),   skip = 4, n_max = 10, col_names = TRUE,   col_types = c(\"text\", \"text\", \"guess\", \"guess\", \"guess\", \"guess\") ) #> # A tibble: 10 × 6 #>    Name               Profession   Age `Has kids` `Date of birth`     #>    <chr>              <chr>      <dbl> <lgl>      <dttm>              #>  1 David Bowie        musician      69 TRUE       1947-01-08 00:00:00 #>  2 Carrie Fisher      actor         60 TRUE       1956-10-21 00:00:00 #>  3 Chuck Berry        musician      90 TRUE       1926-10-18 00:00:00 #>  4 Bill Paxton        actor         61 TRUE       1955-05-17 00:00:00 #>  5 Prince             musician      57 TRUE       1958-06-07 00:00:00 #>  6 Alan Rickman       actor         69 FALSE      1946-02-21 00:00:00 #>  7 Florence Henderson actor         82 TRUE       1934-02-14 00:00:00 #>  8 Harper Lee         author        89 FALSE      1926-04-28 00:00:00 #>  9 Zsa Zsa Gábor      actor         99 TRUE       1917-02-06 00:00:00 #> 10 George Michael     musician      53 FALSE      1963-06-25 00:00:00 #> # ℹ 1 more variable: `Date of death` <dttm>  # Accomodate a column with disparate types via col_type = \"list\" df <- read_excel(readxl_example(\"clippy.xlsx\"), col_types = c(\"text\", \"list\")) df #> # A tibble: 4 × 2 #>   name                 value      #>   <chr>                <list>     #> 1 Name                 <chr [1]>  #> 2 Species              <chr [1]>  #> 3 Approx date of death <dttm [1]> #> 4 Weight in grams      <dbl [1]>  df$value #> [[1]] #> [1] \"Clippy\" #>  #> [[2]] #> [1] \"paperclip\" #>  #> [[3]] #> [1] \"2007-01-01 UTC\" #>  #> [[4]] #> [1] 0.9 #>  sapply(df$value, class) #> [[1]] #> [1] \"character\" #>  #> [[2]] #> [1] \"character\" #>  #> [[3]] #> [1] \"POSIXct\" \"POSIXt\"  #>  #> [[4]] #> [1] \"numeric\" #>   # Limit the number of data rows read read_excel(datasets, n_max = 3) #> # A tibble: 3 × 11 #>     mpg   cyl  disp    hp  drat    wt  qsec    vs    am  gear  carb #>   <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> #> 1  21       6   160   110  3.9   2.62  16.5     0     1     4     4 #> 2  21       6   160   110  3.9   2.88  17.0     0     1     4     4 #> 3  22.8     4   108    93  3.85  2.32  18.6     1     1     4     1  # Read from an Excel range using A1 or R1C1 notation read_excel(datasets, range = \"C1:E7\") #> # A tibble: 6 × 3 #>    disp    hp  drat #>   <dbl> <dbl> <dbl> #> 1   160   110  3.9  #> 2   160   110  3.9  #> 3   108    93  3.85 #> 4   258   110  3.08 #> 5   360   175  3.15 #> 6   225   105  2.76 read_excel(datasets, range = \"R1C2:R2C5\") #> # A tibble: 1 × 4 #>     cyl  disp    hp  drat #>   <dbl> <dbl> <dbl> <dbl> #> 1     6   160   110   3.9  # Specify the sheet as part of the range read_excel(datasets, range = \"mtcars!B1:D5\") #> # A tibble: 4 × 3 #>     cyl  disp    hp #>   <dbl> <dbl> <dbl> #> 1     6   160   110 #> 2     6   160   110 #> 3     4   108    93 #> 4     6   258   110  # Read only specific rows or columns read_excel(datasets, range = cell_rows(102:151), col_names = FALSE) #> # A tibble: 0 × 0 read_excel(datasets, range = cell_cols(\"B:D\")) #> # A tibble: 32 × 3 #>      cyl  disp    hp #>    <dbl> <dbl> <dbl> #>  1     6  160    110 #>  2     6  160    110 #>  3     4  108     93 #>  4     6  258    110 #>  5     8  360    175 #>  6     6  225    105 #>  7     8  360    245 #>  8     4  147.    62 #>  9     4  141.    95 #> 10     6  168.   123 #> # ℹ 22 more rows  # Get a preview of column names names(read_excel(readxl_example(\"datasets.xlsx\"), n_max = 0)) #>  [1] \"mpg\"  \"cyl\"  \"disp\" \"hp\"   \"drat\" \"wt\"   \"qsec\" \"vs\"   \"am\"   #> [10] \"gear\" \"carb\"  # exploit full .name_repair flexibility from tibble  # \"universal\" names are unique and syntactic read_excel(   readxl_example(\"deaths.xlsx\"),   range = \"arts!A5:F15\",   .name_repair = \"universal\" ) #> New names: #> • `Has kids` -> `Has.kids` #> • `Date of birth` -> `Date.of.birth` #> • `Date of death` -> `Date.of.death` #> # A tibble: 10 × 6 #>    Name               Profession   Age Has.kids Date.of.birth       #>    <chr>              <chr>      <dbl> <lgl>    <dttm>              #>  1 David Bowie        musician      69 TRUE     1947-01-08 00:00:00 #>  2 Carrie Fisher      actor         60 TRUE     1956-10-21 00:00:00 #>  3 Chuck Berry        musician      90 TRUE     1926-10-18 00:00:00 #>  4 Bill Paxton        actor         61 TRUE     1955-05-17 00:00:00 #>  5 Prince             musician      57 TRUE     1958-06-07 00:00:00 #>  6 Alan Rickman       actor         69 FALSE    1946-02-21 00:00:00 #>  7 Florence Henderson actor         82 TRUE     1934-02-14 00:00:00 #>  8 Harper Lee         author        89 FALSE    1926-04-28 00:00:00 #>  9 Zsa Zsa Gábor      actor         99 TRUE     1917-02-06 00:00:00 #> 10 George Michael     musician      53 FALSE    1963-06-25 00:00:00 #> # ℹ 1 more variable: Date.of.death <dttm>  # specify name repair as a built-in function read_excel(readxl_example(\"clippy.xlsx\"), .name_repair = toupper) #> # A tibble: 4 × 2 #>   NAME                 VALUE     #>   <chr>                <chr>     #> 1 Name                 Clippy    #> 2 Species              paperclip #> 3 Approx date of death 39083     #> 4 Weight in grams      0.9        # specify name repair as a custom function my_custom_name_repair <- function(nms) tolower(gsub(\"[.]\", \"_\", nms)) read_excel(   readxl_example(\"datasets.xlsx\"),   .name_repair = my_custom_name_repair ) #> # A tibble: 32 × 11 #>      mpg   cyl  disp    hp  drat    wt  qsec    vs    am  gear  carb #>    <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> #>  1  21       6  160    110  3.9   2.62  16.5     0     1     4     4 #>  2  21       6  160    110  3.9   2.88  17.0     0     1     4     4 #>  3  22.8     4  108     93  3.85  2.32  18.6     1     1     4     1 #>  4  21.4     6  258    110  3.08  3.22  19.4     1     0     3     1 #>  5  18.7     8  360    175  3.15  3.44  17.0     0     0     3     2 #>  6  18.1     6  225    105  2.76  3.46  20.2     1     0     3     1 #>  7  14.3     8  360    245  3.21  3.57  15.8     0     0     3     4 #>  8  24.4     4  147.    62  3.69  3.19  20       1     0     4     2 #>  9  22.8     4  141.    95  3.92  3.15  22.9     1     0     4     2 #> 10  19.2     6  168.   123  3.92  3.44  18.3     1     0     4     4 #> # ℹ 22 more rows  # specify name repair as an anonymous function read_excel(   readxl_example(\"datasets.xlsx\"),   sheet = \"chickwts\",   .name_repair = ~ substr(.x, start = 1, stop = 3) ) #> # A tibble: 71 × 2 #>      wei fee       #>    <dbl> <chr>     #>  1   179 horsebean #>  2   160 horsebean #>  3   136 horsebean #>  4   227 horsebean #>  5   217 horsebean #>  6   168 horsebean #>  7   108 horsebean #>  8   124 horsebean #>  9   143 horsebean #> 10   140 horsebean #> # ℹ 61 more rows"},{"path":"https://readxl.tidyverse.org/dev/reference/readxl-package.html","id":null,"dir":"Reference","previous_headings":"","what":"readxl: Read Excel Files — readxl-package","title":"readxl: Read Excel Files — readxl-package","text":"Import excel files R. Supports '.xls' via embedded 'libxls' C library https://github.com/libxls/libxls '.xlsx' via embedded 'RapidXML' C++ library https://rapidxml.sourceforge.net/. Works Windows, Mac Linux without external dependencies.","code":""},{"path":[]},{"path":"https://readxl.tidyverse.org/dev/reference/readxl-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"readxl: Read Excel Files — readxl-package","text":"Maintainer: Jennifer Bryan jenny@posit.co (ORCID) Authors: Hadley Wickham hadley@posit.co (ORCID) contributors: Posit, PBC (Copyright holder R code C/C++ code without explicit copyright attribution) [copyright holder, funder] Marcin Kalicinski (Author included RapidXML code) [contributor, copyright holder] Komarov Valery (Author included libxls code) [contributor, copyright holder] Christophe Leitienne (Author included libxls code) [contributor, copyright holder] Bob Colbert (Author included libxls code) [contributor, copyright holder] David Hoerl (Author included libxls code) [contributor, copyright holder] Evan Miller (Author included libxls code) [contributor, copyright holder]","code":""},{"path":"https://readxl.tidyverse.org/dev/reference/readxl_example.html","id":null,"dir":"Reference","previous_headings":"","what":"Get path to readxl example — readxl_example","title":"Get path to readxl example — readxl_example","text":"readxl comes bundled example files inst/extdata directory. function make easy access.","code":""},{"path":"https://readxl.tidyverse.org/dev/reference/readxl_example.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get path to readxl example — readxl_example","text":"","code":"readxl_example(path = NULL)"},{"path":"https://readxl.tidyverse.org/dev/reference/readxl_example.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get path to readxl example — readxl_example","text":"path Name file. NULL, example files listed.","code":""},{"path":"https://readxl.tidyverse.org/dev/reference/readxl_example.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get path to readxl example — readxl_example","text":"","code":"readxl_example() #>  [1] \"clippy.xls\"    \"clippy.xlsx\"   \"datasets.xls\"  \"datasets.xlsx\" #>  [5] \"deaths.xls\"    \"deaths.xlsx\"   \"geometry.xls\"  \"geometry.xlsx\" #>  [9] \"type-me.xls\"   \"type-me.xlsx\"  readxl_example(\"datasets.xlsx\") #> [1] \"/home/runner/work/_temp/Library/readxl/extdata/datasets.xlsx\""},{"path":"https://readxl.tidyverse.org/dev/reference/readxl_progress.html","id":null,"dir":"Reference","previous_headings":"","what":"Determine whether to show progress spinner — readxl_progress","title":"Determine whether to show progress spinner — readxl_progress","text":"default, readxl displays progress spinner unless one following TRUE: spinner explicitly disabled setting options(readxl.show_progress = FALSE). code run non-interactive session (interactive() FALSE). code run knitr / rmarkdown. code run RStudio notebook chunk. readxl uses progress package --hood therefore also sensitive options consults.","code":""},{"path":"https://readxl.tidyverse.org/dev/reference/readxl_progress.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Determine whether to show progress spinner — readxl_progress","text":"","code":"readxl_progress()"},{"path":[]},{"path":"https://readxl.tidyverse.org/dev/news/index.html","id":"readxl-143","dir":"Changelog","previous_headings":"","what":"readxl 1.4.3","title":"readxl 1.4.3","text":"CRAN release: 2023-07-06 release contains user-facing changes.","code":""},{"path":"https://readxl.tidyverse.org/dev/news/index.html","id":"readxl-142","dir":"Changelog","previous_headings":"","what":"readxl 1.4.2","title":"readxl 1.4.2","text":"CRAN release: 2023-02-09 release contains user-facing changes. embed development version libxls (https://github.com/libxls/libxls), based recent released version, v1.6.2. reason embedding development version ship version libxls incorporates fix CVE (#679): CVE-2021-27836 readxl longer declares use C++11. readxl compile Alpine Linux. small readxl-specific patches made embedded libxls code comply CRAN requests, avoiding use sprintf().","code":""},{"path":"https://readxl.tidyverse.org/dev/news/index.html","id":"readxl-141","dir":"Changelog","previous_headings":"","what":"readxl 1.4.1","title":"readxl 1.4.1","text":"CRAN release: 2022-08-17 Help files man/ re-generated, give rise valid HTML5. (impetus release, keep package safely CRAN.)","code":""},{"path":"https://readxl.tidyverse.org/dev/news/index.html","id":"readxl-140","dir":"Changelog","previous_headings":"","what":"readxl 1.4.0","title":"readxl 1.4.0","text":"CRAN release: 2022-03-28 release mostly substantial internal changes noticeable users (set stage future work): Updating embedded version libxls () Switching Rcpp cpp11 () Refactoring reduce duplication .xls .xlsx branches However, small features / bug fixes: “Date Date”: classification number formats datetime-ish sophisticated longer easily fooled , e.g., colours currencies. affects cell column type guessing, hopefully better (#388, #559, @nacnudus, @reviewher). Cell location determined robustly .xlsx files, guarding idiosyncratic way certain 3rd party tools include (, rather, include) cell location individual cell nodes (#648, #671). Warning messages impossible dates specific. Unsupported dates prior 1900 message now, instead lumped dates non-existent day February 29, 1900 (#551, #554, @cderv).","code":""},{"path":"https://readxl.tidyverse.org/dev/news/index.html","id":"dependency-and-licensing-changes-1-4-0","dir":"Changelog","previous_headings":"","what":"Dependency and licensing changes","title":"readxl 1.4.0","text":"readxl now licensed MIT (#632). readxl now states support R >= 3.4 explicitly. 3.4? tidyverse policy support current version, devel version, four previous versions R. necessary introduce minimum R version, order state minimum version package listed LinkingTo. readxl embeds libxls v1.6.2 (previous release embedded v1.5.0). libxls project hosted https://github.com/libxls/libxls can learn cumulative changes release notes: v1.6.2 v1.6.1 v1.6.0 v1.5.3 v1.5.2 v1.5.1 readxl switched Rcpp cpp11 now requires C++11 (#659, @sbearrows). minimum version tibble bumped 2.0.1 (released 2019-01-12), completing transition approach column name repair used across tidyverse.","code":""},{"path":"https://readxl.tidyverse.org/dev/news/index.html","id":"readxl-131","dir":"Changelog","previous_headings":"","what":"readxl 1.3.1","title":"readxl 1.3.1","text":"CRAN release: 2019-03-13 Pragmatic patch release update tests advance v2.1.0 tibble package. release updates name repair: standard suffix becomes ...j, instead ..j, partially motivated user experience readxl.","code":""},{"path":"https://readxl.tidyverse.org/dev/news/index.html","id":"readxl-130","dir":"Changelog","previous_headings":"","what":"readxl 1.3.0","title":"readxl 1.3.0","text":"CRAN release: 2019-02-15","code":""},{"path":"https://readxl.tidyverse.org/dev/news/index.html","id":"dependency-changes-1-3-0","dir":"Changelog","previous_headings":"","what":"Dependency changes","title":"readxl 1.3.0","text":"readxl embeds libxls v1.5.0. first official release libxls several years, although readxl tracking development version interim. libxls project now officially hosted https://github.com/libxls/libxls. particular, libxls v1.5.0 addresses two CVEs: CVE-2018-20452 CVE-2018-20450","code":""},{"path":"https://readxl.tidyverse.org/dev/news/index.html","id":"readxl-120","dir":"Changelog","previous_headings":"","what":"readxl 1.2.0","title":"readxl 1.2.0","text":"CRAN release: 2018-12-19","code":""},{"path":"https://readxl.tidyverse.org/dev/news/index.html","id":"column-name-repair-1-2-0","dir":"Changelog","previous_headings":"","what":"Column name repair","title":"readxl 1.2.0","text":"readxl exposes .name_repair argument coming version 2.0.0 tibble package. readxl default .name_repair = \"unique\", keeping readxl convention ensure column names neither missing duplicated. Column Names new article feature. readxl delegates name repair tibble, therefore installed tibble version determines names repaired. Consider spreadsheet three columns: one unnamed two named x. Content cells Excel: \"\", x, x New style column names: ..1, x..2, x..3 Legacy column names: X__1, x, x__1 per session, readxl emits message stating works best tibble >= v2.0.0. anticipated become hard minimum version requirement future version readxl.","code":""},{"path":"https://readxl.tidyverse.org/dev/news/index.html","id":"other-changes-1-2-0","dir":"Changelog","previous_headings":"","what":"Other changes","title":"readxl 1.2.0","text":"read_excel() friends gain progress argument controls progress spinner (#243, #538). read_xls() read_xlsx() pass trim_ws argument along (#514). readxl new article reading Excel files multiple header rows (#486, #492 @apreshill). xlsx files “styles” part can now read (#505, #506 @jt6) paths passed normalizePath() (#498, #499, new behaviour xlsx xls) enc2native() (#370).","code":""},{"path":"https://readxl.tidyverse.org/dev/news/index.html","id":"dependency-changes-1-2-0","dir":"Changelog","previous_headings":"","what":"Dependency changes","title":"readxl 1.2.0","text":"readxl now tested back R >= 3.1. Embedded libxls updated, using source https://github.com/libxls/libxls. readxl’s DESCRIPTION now records SHA associated embedded libxls Note.","code":""},{"path":"https://readxl.tidyverse.org/dev/news/index.html","id":"readxl-110","dir":"Changelog","previous_headings":"","what":"readxl 1.1.0","title":"readxl 1.1.0","text":"CRAN release: 2018-04-20 read_excel() excel_sheets() associate larger set file extensions xlsx better able guess format file nonstandard missing extension. deciding whether treat file xls xlsx. (#342, #411, #457) excel_format() newly-exported format-guessing function. format_from_ext() low-level helper, also exported, consults file extension. addition obvious interpretation .xls .xlsx, extensions .xlsm, .xltx, .xltm now associated xlsx. format_from_signature() low-level helper, also exported, consults file’s signature (.k.. magic number). ’s handy files lack extension. Embedded libxls updated address security vulnerabilitities identified late 2017 (#441, #442). CVE-2017-12110, CVE-2017-2896, CVE-2017-2897 demonstrated affect readxl v1.0.0. addressed libxls embedded version libxls incorporates fixes. Although CVE-2017-12111 CVE-2017-2919 mention readxl, notices clarify CVEs actually affect readxl. fixed libxls quite : CVE-2017-12111 since 2014 CVE-2017-2919 since 2012. xlsx structured “minimal conformant SpreadsheetML package” can read. obvious feature sheets lack xl/ directory unzipped form. (xlsx, #435, #437) Reading xls sheet exactly 65,536 rows longer enters infinite loop. (xls, #373, #416, #432 @vkapartzianis) Doubles, including datetimes, coerced character xls now much higher precision, comparable xlsx behaviour. (xls, #430, #431) Integer-y numbers larger 2^31 coerced properly string (xls, #346) Shared strings compared NA strings lookup, never basis index. (xlsx, #401) Better checks messaging around nonexistent files. (#392) Add $(C_VISIBILITY) compiler flags hide internal symbols dll. (#385 @jeroen) Numeric data logical column now coerces properly logical. (xlsx, #385 @nacnudus)","code":""},{"path":"https://readxl.tidyverse.org/dev/news/index.html","id":"readxl-100","dir":"Changelog","previous_headings":"","what":"readxl 1.0.0","title":"readxl 1.0.0","text":"CRAN release: 2017-04-18","code":""},{"path":"https://readxl.tidyverse.org/dev/news/index.html","id":"sheet-geometry-1-0-0","dir":"Changelog","previous_headings":"","what":"Sheet geometry","title":"readxl 1.0.0","text":"range new argument reading rectangular range, possibly open. (#314, #8) n_max new argument limits number data rows read. (#306, #281) Empty cells, rows, columns (xlsx #248 #240, xls #271): Cells content longer loaded, even appear file. Affects cells data carry explicit formatting, detectable Excel seemingly empty cells format “General”. cells may still exist returned tibble, value NA, depending sheet geometry. Eliminates source trailing rows (#203) columns (#236, #162, #146) consisting entirely NA. Eliminates subtle source disagreement user-provided column names guessed column types (#169, #81). Embedded empty columns longer automatically dropped, regardless whether column name. (#157, #261) Worksheets completely empty contain column names longer error, return tibble zero rows. (#222, #144, #65) Improved handling leading embedded blank rows explicit row skipping. (#224, #194, #178, #156, #101) User-supplied col_names processed relative user-supplied col_types, given. Specifically, col_names considered valid length col_types, removing skipped columns. (#81, #261)","code":""},{"path":"https://readxl.tidyverse.org/dev/news/index.html","id":"column-types-and-coercion-1-0-0","dir":"Changelog","previous_headings":"","what":"Column types and coercion","title":"readxl 1.0.0","text":"\"list\" new accepted value col_types. Loads data list length-1 vectors, typed using logic col_types = NULL, cell--cell basis (#262 @gergness). \"logical\" new accepted value col_types. col_types = NULL, guessed type cells Excel advertises Boolean. column data, now filled logical NA. (#277, #270) \"guess\" new accepted value col_types. Allows user specify column types, allowing others guessed (#286) user-specified col_types length one replicated length equal number columns. (#127, #114, #261) \"blank\" deprecated favor descriptive readr-compatible \"skip\", now preferred way request column skipped. (#260, #193, #261) guess_max new argument lets user adjust number rows used guess column types. (#223, #257 @tklebel @jennybc) trim_ws new argument remove leading trailing whitespace. defaults TRUE. (#326, #211) na can now hold multiple NA values, e.g., read_excel(\"missing-values.xls\", na = c(\"NA\", \"1\")). (#13, #56, @jmarshallnz) Coercions cell data: Numeric data appears date column coerced date. Throws warning. (#277, #266) Dates appear numeric column converted NA instead integer representation. Throws warning. (#277, #263) “Number stored text”: text cell found numeric column, read_excel() attempts coerce string numeric falls back NA unsuccessful. Throws warning. (#277, #217, #106) Cells error treated blank imported NA (instead string \"error\"). (#277, #62) BoolErr cells now handled xls. Suppresses message \"Unknown type: 517\". (#274, #259) Dates arise formula treated dates (vs. numeric) xls. (#277) Dates .xlsx files saved LibreOffice now recognized . (#134, @zeehio)","code":""},{"path":"https://readxl.tidyverse.org/dev/news/index.html","id":"compatibility-1-0-0","dir":"Changelog","previous_headings":"","what":"Compatibility","title":"readxl 1.0.0","text":"Many 3rd party tools write xls xlsx comply spec, quite different files produced Excel. Namespace prefixes now stripped element names attributes parsing XML xlsx. Workaround creative approach taken s/w, coupled rapidxml’s lack namespace support. (#295, #268, #202, #80) Excel mixes 0- 1-indexing reported row column dimensions xls libxls expects . s/w may index 0 , preventing libxls reading last column. Patched restore access cells. (#273, #180, #152, #99) robust logic sheet lookup xlsx. Improves compatibility xlsx written variety tools /xlsx containing chartsheets. (#233, #104, #200, #168, #116, @jimhester @jennybc) numFmtId attribute longer accessed exist (xlsx written https://www.epplussoftware.com). (#191, #229) Location inferred cells declare location (xlsx written JMP). (#240, #163, #102)","code":""},{"path":"https://readxl.tidyverse.org/dev/news/index.html","id":"other-1-0-0","dir":"Changelog","previous_headings":"","what":"Other","title":"readxl 1.0.0","text":"read_xls() read_xlsx() now exposed, files without .xls .xlsx extension can read. (#85, @jirkalewandowski) Lotus 1-2-3 leap year bug now accounted , .e. date-times prior March 1, 1900 import correctly. Date-times non-existent leap day February 29, 1900 import NA throw warning. (#264, #148, #292) tibble package now imported (#175, @krlmlr) tibble::repair_names() used prevent empty, NA, duplicated column names. (#216, #208, #199 #182, #53, #247). Default column names xlsx now start X__1 instead X__0. (#98, @zeehio, @krlmlr) Fix compilation warnings/failures (FreeBSD 10.3 #221, gcc 4.9.3 #124) /problems reading xls (CentOS 6.6 #189). (#244, #245, #246 @jeroen) Unwanted printed output (e.g., DEFINEDNAME: 21 00 00 ...) suppressed reading xls contains defined range. (#82, #188, @PedramNavid)","code":""},{"path":"https://readxl.tidyverse.org/dev/news/index.html","id":"readxl-011","dir":"Changelog","previous_headings":"","what":"readxl 0.1.1","title":"readxl 0.1.1","text":"CRAN release: 2016-03-28 Add support correctly reading strings .xlsx files containing escaped unicode characters (e.g. _x005F_). (#51, @jmarshallnz)","code":""}]
